magic_duel_initialize_stats = {
	set_variable = { mag_shield = 0 }
	set_variable = { mag_accuracy = 100 }
	set_variable = { mag_evasion = 15 }
	set_variable = { mag_resistance = 0 }
	set_variable = { mag_dot = 0 }
	set_variable = { mag_hot = 0 }
	trigger_switch = {
		on_trigger = ADM
		6 = { set_variable = { mag_hp = 200 } }
		5 = { set_variable = { mag_hp = 180 } }
		4 = { set_variable = { mag_hp = 160 } }
		3 = { set_variable = { mag_hp = 140 } }
		2 = { set_variable = { mag_hp = 120 } }
		1 = { set_variable = { mag_hp = 100 } }
		0 = { set_variable = { mag_hp = 80 } }
	}
	trigger_switch = {
		on_trigger = DIP
		6 = { set_variable = { mag_mana = 150 } }
		5 = { set_variable = { mag_mana = 130 } }
		4 = { set_variable = { mag_mana = 110 } }
		3 = { set_variable = { mag_mana = 90 } }
		2 = { set_variable = { mag_mana = 70 } }
		1 = { set_variable = { mag_mana = 50 } }
		0 = { set_variable = { mag_mana = 30 } }
	}
	trigger_switch = {
		on_trigger = MIL
		6 = { set_variable = { mag_power = 1.3 } }
		5 = { set_variable = { mag_power = 1.25 } }
		4 = { set_variable = { mag_power = 1.2 } }
		3 = { set_variable = { mag_power = 1.15 } }
		2 = { set_variable = { mag_power = 1.1 } }
		1 = { set_variable = { mag_power = 1.05 } }
		0 = { set_variable = { mag_power = 1 } }
	}
	
	#Races
	if = {
		limit = { ruler_is_human = yes }
		multiply_variable = { mag_hp = 1 }
		multiply_variable = { mag_mana = 1 }
		multiply_variable = { mag_power = 1 }
	}
	else_if = {
		limit = { ruler_is_half_elven = yes }
		multiply_variable = { mag_hp = 0.95 }
		multiply_variable = { mag_mana = 1.05 }
		multiply_variable = { mag_power = 1 }
	}
	else_if = {
		limit = { ruler_is_elven = yes }
		multiply_variable = { mag_hp = 0.9 }
		multiply_variable = { mag_mana = 1.5 }
		multiply_variable = { mag_power = 1.2 }
	}
	else_if = {
		limit = { ruler_is_dwarven = yes }
		multiply_variable = { mag_hp = 1.1 }
		multiply_variable = { mag_mana = 0.9 }
		multiply_variable = { mag_power = 1 }
		change_variable = { mag_resistance = 5 }
	}
	else_if = {
		limit = { ruler_is_gnomish = yes }
		multiply_variable = { mag_hp = 0.75 }
		multiply_variable = { mag_mana = 1 }
		multiply_variable = { mag_power = 1 }
	}
	else_if = {
		limit = { ruler_is_half_orcish = yes }
		multiply_variable = { mag_hp = 1.1 }
		multiply_variable = { mag_mana = 0.9 }
		multiply_variable = { mag_power = 1 }
	}
	else_if = {
		limit = { ruler_is_orcish = yes }
		multiply_variable = { mag_hp = 1.3 }
		multiply_variable = { mag_mana = 0.8 }
		multiply_variable = { mag_power = 1.1 }
		change_variable = { mag_resistance = 5 }
	}
	else_if = {
		limit = { ruler_is_goblin = yes }
		multiply_variable = { mag_hp = 0.75 }
		multiply_variable = { mag_mana = 1.1 }
		multiply_variable = { mag_power = 1.1 }
	}
	else_if = {
		limit = { ruler_is_gnollish = yes }
		multiply_variable = { mag_hp = 1.25 }
		multiply_variable = { mag_mana = 0.9 }
		multiply_variable = { mag_power = 0.9 }
	}
	else_if = {
		limit = { ruler_is_kobold = yes }
		multiply_variable = { mag_hp = 0.7 }
		multiply_variable = { mag_mana = 0.9 }
		multiply_variable = { mag_power = 0.9 }
	}
	else_if = {
		limit = { ruler_is_halfling = yes }
		multiply_variable = { mag_hp = 0.7 }
		multiply_variable = { mag_mana = 1.2 }
		multiply_variable = { mag_power = 0.8 }
	}
	else_if = {
		limit = { ruler_is_harimari = yes }
		multiply_variable = { mag_hp = 1.3 }
		multiply_variable = { mag_mana = 1 }
		multiply_variable = { mag_power = 1.1 }
	}
	else_if = {
		limit = { ruler_is_hobgoblin = yes }
		multiply_variable = { mag_hp = 1.3 }
		multiply_variable = { mag_mana = 0.9 }
		multiply_variable = { mag_power = 1 }
	}
	else_if = {
		limit = { ruler_is_troll = yes }
		multiply_variable = { mag_hp = 1.5 }
		multiply_variable = { mag_mana = 0.5 }
		multiply_variable = { mag_power = 1 }
		change_variable = { mag_resistance = 20 }
	}
	else_if = {
		limit = { ruler_is_ogre = yes }
		multiply_variable = { mag_hp = 1.4 }
		multiply_variable = { mag_mana = 0.6 }
		multiply_variable = { mag_power = 1 }
		change_variable = { mag_resistance = 10 }
	}
	else_if = {
		limit = { ruler_is_harpy = yes }
		multiply_variable = { mag_hp = 0.9 }
		multiply_variable = { mag_mana = 1.1 }
		multiply_variable = { mag_power = 1 }
	}
	else_if = {
		limit = { ruler_is_centaur = yes }
		multiply_variable = { mag_hp = 1.1 }
		multiply_variable = { mag_mana = 0.8 }
		multiply_variable = { mag_power = 1.1 }
	}
	else_if = {
		limit = { ruler_is_ruinborn = yes }
		multiply_variable = { mag_hp = 0.8 }
		multiply_variable = { mag_mana = 2 }
		multiply_variable = { mag_power = 0.5 }
		change_variable = { mag_resistance = 25 }
	}
	
	#Age
	trigger_switch = {
		on_trigger = ruler_age
		
		460 = { multiply_variable = { mag_hp = 0.4 } multiply_variable = { mag_mana = 3.3 } multiply_variable = { mag_power = 2.15 } }
		440 = { multiply_variable = { mag_hp = 0.45 } multiply_variable = { mag_mana = 3.2 } multiply_variable = { mag_power = 2.1 } }
		420 = { multiply_variable = { mag_hp = 0.5 } multiply_variable = { mag_mana = 3.1 } multiply_variable = { mag_power = 2.05 } }
		400 = { multiply_variable = { mag_hp = 0.55 } multiply_variable = { mag_mana = 3 } multiply_variable = { mag_power = 2 } }
		380 = { multiply_variable = { mag_hp = 0.6 } multiply_variable = { mag_mana = 2.9 } multiply_variable = { mag_power = 1.95 } }
		360 = { multiply_variable = { mag_hp = 0.65 } multiply_variable = { mag_mana = 2.8 } multiply_variable = { mag_power = 1.9 } }
		340 = { multiply_variable = { mag_hp = 0.7 } multiply_variable = { mag_mana = 2.7 } multiply_variable = { mag_power = 1.85 } }
		320 = { multiply_variable = { mag_hp = 0.75 } multiply_variable = { mag_mana = 2.6 } multiply_variable = { mag_power = 1.8 } }
		300 = { multiply_variable = { mag_hp = 0.8 } multiply_variable = { mag_mana = 2.5 } multiply_variable = { mag_power = 1.75 } }
		280 = { multiply_variable = { mag_hp = 0.85 } multiply_variable = { mag_mana = 2.4 } multiply_variable = { mag_power = 1.7 } }
		260 = { multiply_variable = { mag_hp = 0.9 } multiply_variable = { mag_mana = 2.3 } multiply_variable = { mag_power = 1.65 } }
		240 = { multiply_variable = { mag_hp = 0.95 } multiply_variable = { mag_mana = 2.2 } multiply_variable = { mag_power = 1.6 } }
		220 = { multiply_variable = { mag_hp = 1 } multiply_variable = { mag_mana = 2.1 } multiply_variable = { mag_power = 1.55 } }
		200 = { multiply_variable = { mag_hp = 1.05 } multiply_variable = { mag_mana = 2 } multiply_variable = { mag_power = 1.5 } }
		180 = { multiply_variable = { mag_hp = 1.1 } multiply_variable = { mag_mana = 1.9 } multiply_variable = { mag_power = 1.45 } }
		160 = { multiply_variable = { mag_hp = 1.15 } multiply_variable = { mag_mana = 1.8 } multiply_variable = { mag_power = 1.40 } }
		140 = { multiply_variable = { mag_hp = 1.2 } multiply_variable = { mag_mana = 1.7 } multiply_variable = { mag_power = 1.35 } }
		120 = { multiply_variable = { mag_hp = 1.25 } multiply_variable = { mag_mana = 1.6 } multiply_variable = { mag_power = 1.3 } }
		100 = { multiply_variable = { mag_hp = 1.3 } multiply_variable = { mag_mana = 1.5 } multiply_variable = { mag_power = 1.25 } }
		80 = { multiply_variable = { mag_hp = 1.35 } multiply_variable = { mag_mana = 1.4 } multiply_variable = { mag_power = 1.2 } }
		60 = { multiply_variable = { mag_hp = 1.4 } multiply_variable = { mag_mana = 1.3 } multiply_variable = { mag_power = 1.15 } }
		40 = { multiply_variable = { mag_hp = 1.45 } multiply_variable = { mag_mana = 1.2 } multiply_variable = { mag_power = 1.1 } }
		20 = { multiply_variable = { mag_hp = 1.5 } multiply_variable = { mag_mana = 1.1 } multiply_variable = { mag_power = 1.05 } }
	}
	
	#Skill
	if = {
		limit = { has_ruler_flag = abjuration_3 }
		multiply_variable = { mag_mana = 1.3 }
		multiply_variable = { mag_power = 1.075 }
	}
	else_if = {
		limit = { has_ruler_flag = abjuration_2 }
		multiply_variable = { mag_mana = 1.2 }
		multiply_variable = { mag_power = 1.05 }
	}
	else_if = {
		limit = { has_ruler_flag = abjuration_1 }
		multiply_variable = { mag_mana = 1.1 }
		multiply_variable = { mag_power = 1.025 }
	}
	
	if = {
		limit = { has_ruler_flag = conjuration_3 }
		multiply_variable = { mag_mana = 1.3 }
		multiply_variable = { mag_power = 1.075 }
	}
	else_if = {
		limit = { has_ruler_flag = conjuration_2 }
		multiply_variable = { mag_mana = 1.2 }
		multiply_variable = { mag_power = 1.5 }
	}
	else_if = {
		limit = { has_ruler_flag = conjuration_1 }
		multiply_variable = { mag_mana = 1.1 }
		multiply_variable = { mag_power = 1.025 }
	}
	
	if = {
		limit = { has_ruler_flag = divination_3 }
		multiply_variable = { mag_mana = 1.3 }
		multiply_variable = { mag_power = 1.075 }
	}
	else_if = {
		limit = { has_ruler_flag = divination_2 }
		multiply_variable = { mag_mana = 1.2 }
		multiply_variable = { mag_power = 1.05 }
	}
	else_if = {
		limit = { has_ruler_flag = divination_1 }
		multiply_variable = { mag_mana = 1.1 }
		multiply_variable = { mag_power = 1.025 }
	}
	
	if = {
		limit = { has_ruler_flag = enchantment_3 }
		multiply_variable = { mag_mana = 1.3 }
		multiply_variable = { mag_power = 1.075 }
	}
	else_if = {
		limit = { has_ruler_flag = enchantment_2 }
		multiply_variable = { mag_mana = 1.2 }
		multiply_variable = { mag_power = 1.05 }
	}
	else_if = {
		limit = { has_ruler_flag = enchantment_1 }
		multiply_variable = { mag_mana = 1.1 }
		multiply_variable = { mag_power = 1.025 }
	}
	
	if = {
		limit = { has_ruler_flag = evocation_3 }
		multiply_variable = { mag_mana = 1.3 }
		multiply_variable = { mag_power = 1.075 }
	}
	else_if = {
		limit = { has_ruler_flag = evocation_2 }
		multiply_variable = { mag_mana = 1.2 }
		multiply_variable = { mag_power = 1.05 }
	}
	else_if = {
		limit = { has_ruler_flag = evocation_1 }
		multiply_variable = { mag_mana = 1.1 }
		multiply_variable = { mag_power = 1.025 }
	}
	
	if = {
		limit = { has_ruler_flag = illusion_3 }
		multiply_variable = { mag_mana = 1.3 }
		multiply_variable = { mag_power = 1.075 }
	}
	else_if = {
		limit = { has_ruler_flag = illusion_2 }
		multiply_variable = { mag_mana = 1.2 }
		multiply_variable = { mag_power = 1.05 }
	}
	else_if = {
		limit = { has_ruler_flag = illusion_1 }
		multiply_variable = { mag_mana = 1.1 }
		multiply_variable = { mag_power = 1.025 }
	}
	
	if = {
		limit = { has_ruler_flag = necromancy_3 }
		multiply_variable = { mag_mana = 1.3 }
		multiply_variable = { mag_power = 1.075 }
	}
	else_if = {
		limit = { has_ruler_flag = necromancy_2 }
		multiply_variable = { mag_mana = 1.2 }
		multiply_variable = { mag_power = 1.05 }
	}
	else_if = {
		limit = { has_ruler_flag = necromancy_1 }
		multiply_variable = { mag_mana = 1.1 }
		multiply_variable = { mag_power = 1.025 }
	}
	
	if = {
		limit = { has_ruler_flag = transmutation_3 }
		multiply_variable = { mag_mana = 1.3 }
		multiply_variable = { mag_power = 1.075 }
	}
	else_if = {
		limit = { has_ruler_flag = transmutation_2 }
		multiply_variable = { mag_mana = 1.2 }
		multiply_variable = { mag_power = 1.05 }
	}
	else_if = {
		limit = { has_ruler_flag = transmutation_1 }
		multiply_variable = { mag_mana = 1.1 }
		multiply_variable = { mag_power = 1.025 }
	}
	
	#Ruler Personality
	
	
	#Special Shit
	if = {
		limit = { has_ruler_modifier = witch_king_modifier }
		multiply_variable = { mag_mana = 2 }
		multiply_variable = { mag_power = 1.2 }
	}
	if = {
		limit = { has_ruler_flag = is_a_vampire }
		multiply_variable = { mag_mana = 1.5 }
		multiply_variable = { mag_power = 1.3 }
	}
	if = {
		limit = { has_ruler_flag = tluukt_zokka_unsurprised }
		multiply_variable = { mag_hp = 1.5 }
		multiply_variable = { mag_mana = 1.5 }
	}
	if = {
		limit = { has_ruler_flag = tluukt_zokka_undistracted }
		multiply_variable = { mag_mana = 1.3 }
		multiply_variable = { mag_hp = 1.2 }
	}
	if = {
		limit = { has_ruler_flag = tluukt_demonloved }
		multiply_variable = { mag_power = 1.2 }
		set_variable = { mag_shield = 80 }
		change_variable = { mag_resistance = 20 }
	}
	if = {
		limit = {
			has_country_flag = tluukt_vs_carodir
			NOT = { has_ruler_modifier = tluukt_the_rule_of_tluukt }
		}
		multiply_variable = { mag_power = 0.6 }
		multiply_variable = { mag_mana = 0.8 }
		multiply_variable = { mag_hp = 1.25 }
	}
	
	#######
	divide_variable = { mag_mana = 1000 }
	divide_variable = { mag_hp = 1000 }
	# divide_variable = { mag_power = 1000 }
	multiply_variable = { mag_mana = 1000 }
	multiply_variable = { mag_hp = 1000 }
	multiply_variable = { mag_power = 100 }
	set_variable = { which = current_mana which = mag_mana }
	set_variable = { which = current_hp which = mag_hp }
	
}

magic_duel_initialize_stats_npc = {
	[[Jorgurem]
		if = {
			limit = { is_variable_equal = { which = mag_hp value = 0 } }
			set_variable = { mag_hp = 5000 }
			set_variable = { which = current_hp which = mag_hp }
		}
		set_variable = { mag_shield = 1250 }
		set_variable = { mag_accuracy = 100 }
		set_variable = { mag_evasion = 15 }
		set_variable = { mag_resistance = 33 }
		set_variable = { mag_dot = 0 }
		set_variable = { mag_hot = 0 }
		set_variable = { mag_mana = 7000 }
		set_variable = { mag_power = 400 }
		ROOT = { PREV = { set_variable = { which = mag_power which = PREV } } } #It scale with yours because i'm a bad boy
		multiply_variable = { mag_power = 2.55 }								#Then he get even more
		if = {
			limit = { NOT = { check_variable = { mag_power = 420.69 } } }		#And that's if you're too weak, trash
			set_variable = { mag_power = 420.69 }								#Haha funny numbers
		}
		set_variable = { which = current_mana which = mag_mana }
		
		#Available Spell for Jorgurem
		set_country_flag = evocation_1
		set_country_flag = evocation_2
		set_country_flag = evocation_3
		set_country_flag = abjuration_1
		set_country_flag = abjuration_2
		set_country_flag = abjuration_3
		set_country_flag = conjuration_1
		set_country_flag = conjuration_2
		set_country_flag = transmutation_1
		set_country_flag = transmutation_2
		set_country_flag = transmutation_3
		set_country_flag = illusion_1
	]
}

magic_duel_npc_clear_magical_flag = {
	clr_country_flag = abjuration_1
	clr_country_flag = abjuration_2
	clr_country_flag = abjuration_3
	clr_country_flag = conjuration_1
	clr_country_flag = conjuration_2
	clr_country_flag = conjuration_3
	clr_country_flag = divination_1
	clr_country_flag = divination_2
	clr_country_flag = divination_3
	clr_country_flag = enchantment_1
	clr_country_flag = enchantment_2
	clr_country_flag = enchantment_3
	clr_country_flag = evocation_1
	clr_country_flag = evocation_2
	clr_country_flag = evocation_3
	clr_country_flag = illusion_1
	clr_country_flag = illusion_2
	clr_country_flag = illusion_3
	clr_country_flag = necromancy_1
	clr_country_flag = necromancy_2
	clr_country_flag = necromancy_3
	clr_country_flag = transmutation_1
	clr_country_flag = transmutation_2
	clr_country_flag = transmutation_3
}

process_magical_turn = {
	hidden_effect = {
		#This is done to check if both mage have done their turn
		change_variable = { magicProcess = 1 }
		hidden_effect = {
			if = {
				limit = { ai = no }
				if = {
					limit = { event_target:attacker = { tag = ROOT } }
					event_target:defender = { country_event = { id = magic_duel.1 } }
				}
				else = {
					event_target:attacker = { country_event = { id = magic_duel.1 } }
				}
			}
		}
		if = {
			limit = {
				event_target:attacker = { check_variable = { magicProcess = 1 } }
				event_target:defender = { check_variable = { magicProcess = 1 } }
			}
			event_target:attacker = { country_event = { id = magic_duel.3 } } #This is the calculation event
		}
	}
}


######
#Adding New Spell Effect
# Don't Forget To Put the spellFoo multiply and set around the Effect. This is done that way so the Spell Power Modifier is properly displayed to the player
cast_spell = {
	hidden_effect = {
		set_variable = { spellFoo = $value$ } #This is the default power of the spell, that get multiplied by your SpellPower
		set_variable = { mag_damage = 0 }
		subtract_variable = { current_mana = $cost$ }
		divide_variable = { mag_power = 100 } #We bring down mag_power to use it in calculation, then bring it back up to display for the player
		if = {
			limit = { NOT = { check_variable = { current_mana = 1 } } }
			set_variable = { current_mana = 0 }
		}
		# [[debuff_spell_evasion]
			# multiply_variable = { which = spellFoo which = mag_power } #This is where the baseDamage x spellPower happen
			# divide_variable = { spellFoo = 100 }
			# set_variable = { tempFoo = 1 }
			# subtract_variable = { which = tempFoo which = spellFoo }
			# set_variable = { which = spellFoo which = tempFoo }
			# set_variable = { which = tempDebuff which = spellFoo }
			# set_variable = { which = tempValue which = mag_evasion }
			# set_variable = { which = mag_evasion which = tempDebuff }
			# if = {
				# limit = { event_target:attacker = { tag = ROOT } }
				# event_target:attacker = {
					# event_target:defender = {
						# set_variable = { which = tempFoo which = PREV }
						# subtract_variable = { which = printSpellEvasion which = tempFoo }
						# multiply_variable = { which = mag_evasion which = PREV }
					# }
				# }
			# }
			# else = {
				# event_target:defender = {
					# event_target:attacker = {
						# set_variable = { which = tempFoo which = PREV }
						# subtract_variable = { which = printSpellEvasion which = tempFoo }
						# multiply_variable = { which = mag_evasion which = PREV }
					# }
				# }
			# }
			# set_variable = { which = mag_evasion which = tempValue }
			# set_variable = { spellFoo = $value$ } #Some spell can have multiple effect. So we reset the value at the end of an effect. This is done because we don't want spell power buff/debuff effect to be affect by your spell power. (because this get out of control really fast)
		# ]
		[[debuff_spell_evasion]
			multiply_variable = { which = spellFoo which = mag_power }
			trim_spell_foo = yes
			if = {
				limit = { event_target:attacker = { tag = ROOT } }
				while = {
					limit = { check_variable = { spellFoo = 1 } }
					event_target:defender = {
						subtract_variable = { mag_evasion = 1 }
						subtract_variable = { printSpellEvasion = 1 }
					}
					subtract_variable = { spellFoo = 1 }
				}
			}
			else = {
				while = {
					limit = { check_variable = { spellFoo = 1 } }
					event_target:attacker = {
						subtract_variable = { mag_evasion = 1 }
						subtract_variable = { printSpellEvasion = 1 }
					}
					subtract_variable = { spellFoo = 1 }
				}
			}
			set_variable = { spellFoo = $value$ } #Some spell can have multiple effect. So we reset the value at the end of an effect. This is done because we don't want spell power buff/debuff effect to be affect by your spell power. (because this get out of control really fast)
		]
		# [[debuff_spell_accuracy]
			# multiply_variable = { which = spellFoo which = mag_power }
			# divide_variable = { spellFoo = 100 }
			# set_variable = { tempFoo = 1 }
			# subtract_variable = { which = tempFoo which = spellFoo }
			# set_variable = { which = spellFoo which = tempFoo }
			# set_variable = { which = tempDebuff which = spellFoo }
			# set_variable = { which = tempValue which = mag_accuracy }
			# set_variable = { which = mag_accuracy which = tempDebuff }
			# if = {
				# limit = { event_target:attacker = { tag = ROOT } }
				# event_target:attacker = {
					# event_target:defender = {
						# set_variable = { which = tempFoo which = PREV }
						# subtract_variable = { which = printSpellAccuracy which = tempFoo }
						# multiply_variable = { which = mag_accuracy which = PREV }
					# }
				# }
			# }
			# else = {
				# event_target:defender = {
					# event_target:attacker = {
						# set_variable = { which = tempFoo which = PREV }
						# subtract_variable = { which = printSpellAccuracy which = tempFoo }
						# multiply_variable = { which = mag_accuracy which = PREV }
					# }
				# }
			# }
			# set_variable = { which = mag_accuracy which = tempValue }
			# set_variable = { spellFoo = $value$ }
		# ]
		[[debuff_spell_accuracy]
			multiply_variable = { which = spellFoo which = mag_power }
			trim_spell_foo = yes
			if = {
				limit = { event_target:attacker = { tag = ROOT } }
				while = {
					limit = { check_variable = { spellFoo = 1 } }
					event_target:defender = {
						subtract_variable = { mag_accuracy = 1 }
						subtract_variable = { printSpellAccuracy = 1 }
					}
					subtract_variable = { spellFoo = 1 }
				}
			}
			else = {
				while = {
					limit = { check_variable = { spellFoo = 1 } }
					event_target:attacker = {
						subtract_variable = { mag_accuracy = 1 }
						subtract_variable = { printSpellAccuracy = 1 }
					}
					subtract_variable = { spellFoo = 1 }
				}
			}
			set_variable = { spellFoo = $value$ }
		]
		# [[debuff_spell_power]
			# set_variable = { tempFoo = 1 }
			# multiply_variable = { spellFoo = 100 }
			# subtract_variable = { which = tempFoo which = spellFoo }
			# set_variable = { which = spellFoo which = tempFoo }
			# set_variable = { which = tempDebuff which = spellFoo }
			# set_variable = { which = tempValue which = mag_power }
			# set_variable = { which = mag_power which = tempDebuff }
			# if = {
				# limit = { event_target:attacker = { tag = ROOT } }
				# event_target:attacker = { event_target:defender = { multiply_variable = { which = mag_power which = PREV } } }
			# }
			# else = {
				# event_target:defender = { event_target:attacker = { multiply_variable = { which = mag_power which = PREV } } }
			# }
			# set_variable = { which = mag_power which = tempValue }
			# set_variable = { spellFoo = $value$ }
		# ]
		[[debuff_spell_power]
			multiply_variable = { spellFoo = 100 }
			trim_spell_foo = yes
			if = {
				limit = { event_target:attacker = { tag = ROOT } }
				while = {
					limit = { check_variable = { spellFoo = 0 } }
					event_target:defender = {
						subtract_variable = { mag_power = 1 }
					}
					subtract_variable = { spellFoo = 1 }
				}
			}
			else = {
				while = {
					limit = { check_variable = { spellFoo = 0 } }
					event_target:attacker = {
						subtract_variable = { mag_power = 1 }
					}
					subtract_variable = { spellFoo = 1 }
				}
			}
			set_variable = { spellFoo = $value$ }
		]
		[[dot]
			multiply_variable = { which = spellFoo which = mag_power }
			if = {
				limit = { event_target:attacker = { tag = ROOT } }
				while = {
					limit = { check_variable = { spellFoo = 1 } }
					event_target:defender = {
						change_variable = { mag_dot = 1 }
					}
					subtract_variable = { spellFoo = 1 }
				}
			}
			else = {
				while = {
					limit = { check_variable = { spellFoo = 1 } }
					event_target:attacker = {
						change_variable = { mag_dot = 1 }
					}
					subtract_variable = { spellFoo = 1 }
				}
			}
			set_variable = { spellFoo = $value$ }
		]
		# [[buff_spell_evasion]
			# multiply_variable = { which = spellFoo which = mag_power }
			# divide_variable = { spellFoo = 100 }
			# change_variable = { spellFoo = 1 }
			# change_variable = { which = printSpellEvasion which = spellFoo }
			# multiply_variable = { which = mag_evasion which = spellFoo }
			# set_variable = { spellFoo = $value$ }
		# ]
		# [[buff_spell_accuracy]
			# multiply_variable = { which = spellFoo which = mag_power }
			# divide_variable = { spellFoo = 100 }
			# change_variable = { spellFoo = 1 }
			# change_variable = { which = printSpellAccuracy which = spellFoo }
			# multiply_variable = { which = mag_accuracy which = spellFoo }
			# set_variable = { spellFoo = $value$ }
		# ]
		[[buff_spell_evasion]
			multiply_variable = { which = spellFoo which = mag_power }
			trim_spell_foo = yes
			change_variable = { which = mag_evasion which = spellFoo }
			change_variable = { which = printSpellEvasion which = spellFoo }
			set_variable = { spellFoo = $value$ }
		]
		[[buff_spell_accuracy]
			multiply_variable = { which = spellFoo which = mag_power }
			trim_spell_foo = yes
			change_variable = { which = mag_accuracy which = spellFoo }
			change_variable = { which = printSpellAccuracy which = spellFoo }
			set_variable = { spellFoo = $value$ }
		]
		# [[buff_spell_power]
			# change_variable = { spellFoo = 1 }
			# multiply_variable = { which = mag_power which = spellFoo }
		# ]
		[[buff_spell_power]
			change_variable = { which = mag_power which = spellFoo }
		]
		[[shield]
			multiply_variable = { which = spellFoo which = mag_power }
			trim_spell_foo = yes
			change_variable = { which = mag_shield which = spellFoo }
			set_variable = { which = printShield which = spellFoo }
			set_ruler_flag = print_shield
			set_variable = { spellFoo = $value$ }
		]
		[[hot]
			multiply_variable = { which = spellFoo which = mag_power }
			trim_spell_foo = yes
			change_variable = { which = mag_hot which = spellFoo }
			set_variable = { spellFoo = $value$ }
		]
		[[heal]
			multiply_variable = { which = spellFoo which = mag_power }
			trim_spell_foo = yes
			change_variable = { which = current_hp which = spellFoo }
			if = {
				limit = { check_variable = { which = current_hp which = mag_hp } }
				set_variable = { which = current_hp which = mag_hp }
			}
			set_variable = { spellFoo = $value$ }
		]
		[[damage]
			multiply_variable = { which = spellFoo which = mag_power }
			trim_spell_foo = yes
			set_variable = { which = mag_damage which = spellFoo }
			set_variable = { spellFoo = $value$ }
		]
		[[regen_mana]
			set_variable = { which = tempMana which = mag_mana }
			multiply_variable = { tempMana = $value$ }
			subtract_variable = { which = tempMana which = mag_mana }
			set_variable = { which = printMana which = tempMana }
			set_ruler_flag = print_mana_regen
			change_variable = { which = current_mana which = tempMana }
		]
		multiply_variable = { mag_power = 100 } #We bring down mag_power to use it in calculation, then bring it back up to display for the player
	}
}

trim_spell_foo = { #Remove the decimal
	divide_variable = { spellFoo = 1000 }
	multiply_variable = { spellFoo = 1000 }
}

clr_magic_duel_printing_flag = {
	hidden_effect = {
		event_target:attacker = {
			clr_ruler_flag = dodged_spell
			clr_ruler_flag = hit_by_spell
			clr_ruler_flag = print_spell_evasion
			clr_ruler_flag = print_spell_accuracy
			clr_ruler_flag = print_mana_regen
			clr_ruler_flag = print_shield
		}
		event_target:defender = {
			clr_ruler_flag = dodged_spell
			clr_ruler_flag = hit_by_spell
			clr_ruler_flag = print_spell_evasion
			clr_ruler_flag = print_spell_accuracy
			clr_ruler_flag = print_mana_regen
			clr_ruler_flag = print_shield
		}
	}
}

reset_printing_value = {
	hidden_effect = {
		# if = {
			# limit = { check_variable = { printSpellEvasion = 0 } }
			# set_variable = { printSpellEvasion = 0 }
		# }
		# if = {
			# limit = { check_variable = { printSpellAccuracy = 0 } }
			# set_variable = { printSpellAccuracy = 0 }
		# }
		# if = {
			# limit = { check_variable = { printMana = 0 } }
			# set_variable = { printMana = 0 }
		# }
		# if = {
			# limit = { check_variable = { printShield = 0 } }
			# set_variable = { printShield = 0 }
		# }
		set_variable = { printSpellEvasion = 0 }
		set_variable = { printSpellAccuracy = 0 }
		set_variable = { printMana = 0 }
		set_variable = { printShield = 0 }
		clr_magic_duel_printing_flag = yes
	}
}

reset_printing_value_mana = {
	hidden_effect = {
		# if = {
			# limit = { check_variable = { printSpellEvasion = 0 } }
			# set_variable = { printSpellEvasion = 0 }
		# }
		# if = {
			# limit = { check_variable = { printSpellAccuracy = 0 } }
			# set_variable = { printSpellAccuracy = 0 }
		# }
		# if = {
			# limit = { check_variable = { printShield = 0 } }
			# set_variable = { printShield = 0 }
		# }
		set_variable = { printSpellEvasion = 0 }
		set_variable = { printSpellAccuracy = 0 }
		set_variable = { printShield = 0 }
		clr_magic_duel_printing_flag_mana = yes
	}
}

clr_magic_duel_printing_flag_mana = {
	hidden_effect = {
		event_target:attacker = {
			clr_ruler_flag = dodged_spell
			clr_ruler_flag = hit_by_spell
			clr_ruler_flag = print_spell_evasion
			clr_ruler_flag = print_spell_accuracy
			clr_ruler_flag = print_shield
		}
		event_target:defender = {
			clr_ruler_flag = dodged_spell
			clr_ruler_flag = hit_by_spell
			clr_ruler_flag = print_spell_evasion
			clr_ruler_flag = print_spell_accuracy
			clr_ruler_flag = print_shield
		}
	}
}

parse_printing_value = {
	hidden_effect = {
		event_target:attacker = {
			if = {
				limit = { has_ruler_flag = print_spell_evasion }
				# subtract_variable = { printSpellEvasion = 1 }
				# multiply_variable = { printSpellEvasion = 100 }
			}
			if = {
				limit = { has_ruler_flag = print_spell_accuracy }
				# subtract_variable = { printSpellAccuracy = 1 }
				# multiply_variable = { printSpellAccuracy = 100 }
			}
		}
		event_target:defender = {
			if = {
				limit = { has_ruler_flag = print_spell_evasion }
				# subtract_variable = { printSpellEvasion = 1 }
				# multiply_variable = { printSpellEvasion = 100 }
			}
			if = {
				limit = { has_ruler_flag = print_spell_accuracy }
				# subtract_variable = { printSpellAccuracy = 1 }
				# multiply_variable = { printSpellAccuracy = 100 }
			}
		}
	}
}

clr_casting_flag = {
	hidden_effect = {
		clr_ruler_flag = casting_abjuration
		clr_ruler_flag = casting_conjuration
		clr_ruler_flag = casting_divination
		clr_ruler_flag = casting_enchantment
		clr_ruler_flag = casting_evocation
		clr_ruler_flag = casting_illusion
		clr_ruler_flag = casting_necromancy
		clr_ruler_flag = casting_transmutation
	}
}

set_printing_flag = {
	if = {
		limit = { NOT = { is_variable_equal = { which = printSpellAccuracy value = 0 } } }
		set_ruler_flag = print_spell_accuracy
	}
	if = {
		limit = { NOT = { is_variable_equal = { which = printSpellEvasion value = 0 } } }
		set_ruler_flag = print_spell_evasion
	}
	if = {
		limit = { NOT = { is_variable_equal = { which = printMana value = 0 } } }
		set_ruler_flag = print_mana_regen
	}
	if = {
		limit = { NOT = { is_variable_equal = { which = printShield value = 0 } } }
		set_ruler_flag = print_shield
	}
}

fix_overflow_value = {
	if = {
		limit = { check_variable = { mag_evasion = 90 } }
		set_variable = { mag_evasion = 90 }
	}
	if = {
		limit = { NOT = { check_variable = { mag_evasion = 10 } } }
		set_variable = { mag_evasion = 10 }
	}
	if = {
		limit = { check_variable = { mag_accuracy = 200 } }
		set_variable = { mag_accuracy = 200 }
	}
	if = {
		limit = { NOT = { check_variable = { mag_accuracy = 20 } } }
		set_variable = { mag_accuracy = 20 }
	}
	if = {
		limit = { check_variable = { which = current_mana which = mag_mana } }
		set_variable = { which = current_mana which = mag_mana }
	}
}

take_spell_damage = {
	set_ruler_flag = hit_by_spell
	set_variable = { printDamage = 0 }
	if = {
		limit = { check_variable = { which = mag_damage which = mag_shield } }
		set_variable = { printShield = 0 }
	}
	while = {
		limit = { check_variable = { mag_damage = 1 } }
		if = {
			limit = { check_variable = { mag_shield = 1 } }
			subtract_variable = { mag_shield = 1 }
			subtract_variable = { printShield = 1 }
			set_ruler_flag = print_shield
		}
		else = {
			set_variable = { mag_shield = 0 }
			subtract_variable = { current_hp = 1 }
			change_variable = { printDamage = 1 }
		}
		subtract_variable = { mag_damage = 1 }
	}
}

spell_hit_or_miss = {
	if = { limit = { check_variable = { which = spellHit value = 50 } }
		if = { limit = { check_variable = { which = spellHit value = 75 } }
			if = { limit = { check_variable = { which = spellHit value = 87 } }
				if = { limit = { check_variable = { which = spellHit value = 93 } }
					if = { limit = { check_variable = { which = spellHit value = 96 } }
						if = { limit = { check_variable = { which = spellHit value = 98 } }
							if = { limit = { check_variable = { which = spellHit value = 99 } }
								random_list = { 99 = { take_spell_damage = yes } 1 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 99 } } }
								random_list = { 98 = { take_spell_damage = yes } 2 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 98 } } }
							if = { limit = { check_variable = { which = spellHit value = 97 } }
								random_list = { 97 = { take_spell_damage = yes } 3 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 97 } } }
								random_list = { 96 = { take_spell_damage = yes } 4 = { set_ruler_flag = dodged_spell } }
							}
						}
					}
					if = { limit = { NOT = { check_variable = { which = spellHit value = 96 } } }
						if = { limit = { check_variable = { which = spellHit value = 94 } }
							if = { limit = { check_variable = { which = spellHit value = 95 } }
								random_list = { 95 = { take_spell_damage = yes } 5 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 95 } } }
								random_list = { 94 = { take_spell_damage = yes } 6 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 94 } } }
							random_list = { 93 = { take_spell_damage = yes } 7 = { set_ruler_flag = dodged_spell } }
						}
					}
				}
				if = { limit = { NOT = { check_variable = { which = spellHit value = 93 } } }
					if = { limit = { check_variable = { which = spellHit value = 90 } }
						if = { limit = { check_variable = { which = spellHit value = 91 } }
							if = { limit = { check_variable = { which = spellHit value = 92 } }
								random_list = { 92 = { take_spell_damage = yes } 8 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 92 } } }
								random_list = { 91 = { take_spell_damage = yes } 9 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 91 } } }
							random_list = { 90 = { take_spell_damage = yes } 10 = { set_ruler_flag = dodged_spell } }
						}
					}
					if = { limit = { NOT = { check_variable = { which = spellHit value = 90 } } }
						if = { limit = { check_variable = { which = spellHit value = 88 } }
							if = { limit = { check_variable = { which = spellHit value = 89 } }
								random_list = { 89 = { take_spell_damage = yes } 11 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 89 } } }
								random_list = { 88 = { take_spell_damage = yes } 12 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 88 } } }
							random_list = { 87 = { take_spell_damage = yes } 13 = { set_ruler_flag = dodged_spell } }
						}
					}
				}
			}
			if = { limit = { NOT = { check_variable = { which = spellHit value = 87 } } }
				if = { limit = { check_variable = { which = spellHit value = 81 } }
					if = { limit = { check_variable = { which = spellHit value = 84 } }
						if = { limit = { check_variable = { which = spellHit value = 85 } }
							if = { limit = { check_variable = { which = spellHit value = 86 } }
								random_list = { 86 = { take_spell_damage = yes } 14 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 86 } } }
								random_list = { 85 = { take_spell_damage = yes } 15 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 85 } } }
							random_list = { 84 = { take_spell_damage = yes } 16 = { set_ruler_flag = dodged_spell } }
						}
					}
					if = { limit = { NOT = { check_variable = { which = spellHit value = 84 } } }
						if = { limit = { check_variable = { which = spellHit value = 82 } }
							if = { limit = { check_variable = { which = spellHit value = 83 } }
								random_list = { 83 = { take_spell_damage = yes } 17 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 83 } } }
								random_list = { 82 = { take_spell_damage = yes } 18 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 82 } } }
							random_list = { 81 = { take_spell_damage = yes } 19 = { set_ruler_flag = dodged_spell } }
						}
					}
				}
				if = { limit = { NOT = { check_variable = { which = spellHit value = 81 } } }
					if = { limit = { check_variable = { which = spellHit value = 78 } }
						if = { limit = { check_variable = { which = spellHit value = 79 } }
							if = { limit = { check_variable = { which = spellHit value = 80 } }
								random_list = { 80 = { take_spell_damage = yes } 20 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 80 } } }
								random_list = { 79 = { take_spell_damage = yes } 21 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 79 } } }
							random_list = { 78 = { take_spell_damage = yes } 22 = { set_ruler_flag = dodged_spell } }
						}
					}
					if = { limit = { NOT = { check_variable = { which = spellHit value = 78 } } }
						if = { limit = { check_variable = { which = spellHit value = 76 } }
							if = { limit = { check_variable = { which = spellHit value = 77 } }
								random_list = { 77 = { take_spell_damage = yes } 23 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 77 } } }
								random_list = { 76 = { take_spell_damage = yes } 24 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 76 } } }
							random_list = { 75 = { take_spell_damage = yes } 25 = { set_ruler_flag = dodged_spell } }
						}
					}
				}
			}
		}
		if = { limit = { NOT = { check_variable = { which = spellHit value = 75 } } }
			if = { limit = { check_variable = { which = spellHit value = 62 } }
				if = { limit = { check_variable = { which = spellHit value = 68 } }
					if = { limit = { check_variable = { which = spellHit value = 71 } }
						if = { limit = { check_variable = { which = spellHit value = 73 } }
							if = { limit = { check_variable = { which = spellHit value = 74 } }
								random_list = { 74 = { take_spell_damage = yes } 26 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 74 } } }
								random_list = { 73 = { take_spell_damage = yes } 27 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 73 } } }
							if = { limit = { check_variable = { which = spellHit value = 72 } }
								random_list = { 72 = { take_spell_damage = yes } 28 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 72 } } }
								random_list = { 71 = { take_spell_damage = yes } 29 = { set_ruler_flag = dodged_spell } }
							}
						}
					}
					if = { limit = { NOT = { check_variable = { which = spellHit value = 71 } } }
						if = { limit = { check_variable = { which = spellHit value = 69 } }
							if = { limit = { check_variable = { which = spellHit value = 70 } }
								random_list = { 70 = { take_spell_damage = yes } 30 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 70 } } }
								random_list = { 69 = { take_spell_damage = yes } 31 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 69 } } }
							random_list = { 68 = { take_spell_damage = yes } 32 = { set_ruler_flag = dodged_spell } }
						}
					}
				}
				if = { limit = { NOT = { check_variable = { which = spellHit value = 68 } } }
					if = { limit = { check_variable = { which = spellHit value = 65 } }
						if = { limit = { check_variable = { which = spellHit value = 66 } }
							if = { limit = { check_variable = { which = spellHit value = 67 } }
								random_list = { 67 = { take_spell_damage = yes } 33 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 67 } } }
								random_list = { 66 = { take_spell_damage = yes } 34 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 66 } } }
							random_list = { 65 = { take_spell_damage = yes } 35 = { set_ruler_flag = dodged_spell } }
						}
					}
					if = { limit = { NOT = { check_variable = { which = spellHit value = 65 } } }
						if = { limit = { check_variable = { which = spellHit value = 63 } }
							if = { limit = { check_variable = { which = spellHit value = 64 } }
								random_list = { 64 = { take_spell_damage = yes } 36 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 64 } } }
								random_list = { 63 = { take_spell_damage = yes } 37 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 63 } } }
							random_list = { 62 = { take_spell_damage = yes } 38 = { set_ruler_flag = dodged_spell } }
						}
					}
				}
			}
			if = { limit = { NOT = { check_variable = { which = spellHit value = 62 } } }
				if = { limit = { check_variable = { which = spellHit value = 56 } }
					if = { limit = { check_variable = { which = spellHit value = 59 } }
						if = { limit = { check_variable = { which = spellHit value = 60 } }
							if = { limit = { check_variable = { which = spellHit value = 61 } }
								random_list = { 61 = { take_spell_damage = yes } 39 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 61 } } }
								random_list = { 60 = { take_spell_damage = yes } 40 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 60 } } }
							random_list = { 59 = { take_spell_damage = yes } 41 = { set_ruler_flag = dodged_spell } }
						}
					}
					if = { limit = { NOT = { check_variable = { which = spellHit value = 59 } } }
						if = { limit = { check_variable = { which = spellHit value = 57 } }
							if = { limit = { check_variable = { which = spellHit value = 58 } }
								random_list = { 58 = { take_spell_damage = yes } 42 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 58 } } }
								random_list = { 57 = { take_spell_damage = yes } 43 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 57 } } }
							random_list = { 56 = { take_spell_damage = yes } 44 = { set_ruler_flag = dodged_spell } }
						}
					}
				}
				if = { limit = { NOT = { check_variable = { which = spellHit value = 56 } } }
					if = { limit = { check_variable = { which = spellHit value = 53 } }
						if = { limit = { check_variable = { which = spellHit value = 54 } }
							if = { limit = { check_variable = { which = spellHit value = 55 } }
								random_list = { 55 = { take_spell_damage = yes } 45 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 55 } } }
								random_list = { 54 = { take_spell_damage = yes } 46 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 54 } } }
							random_list = { 53 = { take_spell_damage = yes } 47 = { set_ruler_flag = dodged_spell } }
						}
					}
					if = { limit = { NOT = { check_variable = { which = spellHit value = 53 } } }
						if = { limit = { check_variable = { which = spellHit value = 51 } }
							if = { limit = { check_variable = { which = spellHit value = 52 } }
								random_list = { 52 = { take_spell_damage = yes } 48 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 52 } } }
								random_list = { 51 = { take_spell_damage = yes } 49 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 51 } } }
							random_list = { 50 = { take_spell_damage = yes } 50 = { set_ruler_flag = dodged_spell } }
						}
					}
				}
			}
		}
	}
	if = { limit = { NOT = { check_variable = { which = spellHit value = 50 } } }
		if = { limit = { check_variable = { which = spellHit value = 25 } }
			if = { limit = { check_variable = { which = spellHit value = 37 } }
				if = { limit = { check_variable = { which = spellHit value = 43 } }
					if = { limit = { check_variable = { which = spellHit value = 46 } }
						if = { limit = { check_variable = { which = spellHit value = 48 } }
							if = { limit = { check_variable = { which = spellHit value = 49 } }
								random_list = { 49 = { take_spell_damage = yes } 51 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 49 } } }
								random_list = { 48 = { take_spell_damage = yes } 52 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 48 } } }
							if = { limit = { check_variable = { which = spellHit value = 47 } }
								random_list = { 47 = { take_spell_damage = yes } 53 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 47 } } }
								random_list = { 46 = { take_spell_damage = yes } 54 = { set_ruler_flag = dodged_spell } }
							}
						}
					}
					if = { limit = { NOT = { check_variable = { which = spellHit value = 46 } } }
						if = { limit = { check_variable = { which = spellHit value = 44 } }
							if = { limit = { check_variable = { which = spellHit value = 45 } }
								random_list = { 45 = { take_spell_damage = yes } 55 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 45 } } }
								random_list = { 44 = { take_spell_damage = yes } 56 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 44 } } }
							random_list = { 43 = { take_spell_damage = yes } 57 = { set_ruler_flag = dodged_spell } }
						}
					}
				}
				if = { limit = { NOT = { check_variable = { which = spellHit value = 43 } } }
					if = { limit = { check_variable = { which = spellHit value = 40 } }
						if = { limit = { check_variable = { which = spellHit value = 41 } }
							if = { limit = { check_variable = { which = spellHit value = 42 } }
								random_list = { 42 = { take_spell_damage = yes } 58 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 42 } } }
								random_list = { 41 = { take_spell_damage = yes } 59 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 41 } } }
							random_list = { 40 = { take_spell_damage = yes } 60 = { set_ruler_flag = dodged_spell } }
						}
					}
					if = { limit = { NOT = { check_variable = { which = spellHit value = 40 } } }
						if = { limit = { check_variable = { which = spellHit value = 38 } }
							if = { limit = { check_variable = { which = spellHit value = 39 } }
								random_list = { 39 = { take_spell_damage = yes } 61 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 39 } } }
								random_list = { 38 = { take_spell_damage = yes } 62 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 38 } } }
							random_list = { 37 = { take_spell_damage = yes } 63 = { set_ruler_flag = dodged_spell } }
						}
					}
				}
			}
			if = { limit = { NOT = { check_variable = { which = spellHit value = 37 } } }
				if = { limit = { check_variable = { which = spellHit value = 31 } }
					if = { limit = { check_variable = { which = spellHit value = 34 } }
						if = { limit = { check_variable = { which = spellHit value = 35 } }
							if = { limit = { check_variable = { which = spellHit value = 36 } }
								random_list = { 36 = { take_spell_damage = yes } 64 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 36 } } }
								random_list = { 35 = { take_spell_damage = yes } 65 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 35 } } }
							random_list = { 34 = { take_spell_damage = yes } 66 = { set_ruler_flag = dodged_spell } }
						}
					}
					if = { limit = { NOT = { check_variable = { which = spellHit value = 34 } } }
						if = { limit = { check_variable = { which = spellHit value = 32 } }
							if = { limit = { check_variable = { which = spellHit value = 33 } }
								random_list = { 33 = { take_spell_damage = yes } 67 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 33 } } }
								random_list = { 32 = { take_spell_damage = yes } 68 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 32 } } }
							random_list = { 31 = { take_spell_damage = yes } 69 = { set_ruler_flag = dodged_spell } }
						}
					}
				}
				if = { limit = { NOT = { check_variable = { which = spellHit value = 31 } } }
					if = { limit = { check_variable = { which = spellHit value = 28 } }
						if = { limit = { check_variable = { which = spellHit value = 29 } }
							if = { limit = { check_variable = { which = spellHit value = 30 } }
								random_list = { 30 = { take_spell_damage = yes } 70 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 30 } } }
								random_list = { 29 = { take_spell_damage = yes } 71 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 29 } } }
							random_list = { 28 = { take_spell_damage = yes } 72 = { set_ruler_flag = dodged_spell } }
						}
					}
					if = { limit = { NOT = { check_variable = { which = spellHit value = 28 } } }
						if = { limit = { check_variable = { which = spellHit value = 26 } }
							if = { limit = { check_variable = { which = spellHit value = 27 } }
								random_list = { 27 = { take_spell_damage = yes } 73 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 27 } } }
								random_list = { 26 = { take_spell_damage = yes } 74 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 26 } } }
							random_list = { 25 = { take_spell_damage = yes } 75 = { set_ruler_flag = dodged_spell } }
						}
					}
				}
			}
		}
		if = { limit = { NOT = { check_variable = { which = spellHit value = 25 } } }
			if = { limit = { check_variable = { which = spellHit value = 12 } }
				if = { limit = { check_variable = { which = spellHit value = 18 } }
					if = { limit = { check_variable = { which = spellHit value = 21 } }
						if = { limit = { check_variable = { which = spellHit value = 23 } }
							if = { limit = { check_variable = { which = spellHit value = 24 } }
								random_list = { 24 = { take_spell_damage = yes } 76 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 24 } } }
								random_list = { 23 = { take_spell_damage = yes } 77 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 23 } } }
							if = { limit = { check_variable = { which = spellHit value = 22 } }
								random_list = { 22 = { take_spell_damage = yes } 78 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 22 } } }
								random_list = { 21 = { take_spell_damage = yes } 79 = { set_ruler_flag = dodged_spell } }
							}
						}
					}
					if = { limit = { NOT = { check_variable = { which = spellHit value = 21 } } }
						if = { limit = { check_variable = { which = spellHit value = 19 } }
							if = { limit = { check_variable = { which = spellHit value = 20 } }
								random_list = { 20 = { take_spell_damage = yes } 80 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 20 } } }
								random_list = { 19 = { take_spell_damage = yes } 81 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 19 } } }
							random_list = { 18 = { take_spell_damage = yes } 82 = { set_ruler_flag = dodged_spell } }
						}
					}
				}
				if = { limit = { NOT = { check_variable = { which = spellHit value = 18 } } }
					if = { limit = { check_variable = { which = spellHit value = 15 } }
						if = { limit = { check_variable = { which = spellHit value = 16 } }
							if = { limit = { check_variable = { which = spellHit value = 17 } }
								random_list = { 17 = { take_spell_damage = yes } 83 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 17 } } }
								random_list = { 16 = { take_spell_damage = yes } 84 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 16 } } }
							random_list = { 15 = { take_spell_damage = yes } 85 = { set_ruler_flag = dodged_spell } }
						}
					}
					if = { limit = { NOT = { check_variable = { which = spellHit value = 15 } } }
						if = { limit = { check_variable = { which = spellHit value = 13 } }
							if = { limit = { check_variable = { which = spellHit value = 14 } }
								random_list = { 14 = { take_spell_damage = yes } 86 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 14 } } }
								random_list = { 13 = { take_spell_damage = yes } 87 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 13 } } }
							random_list = { 12 = { take_spell_damage = yes } 88 = { set_ruler_flag = dodged_spell } }
						}
					}
				}
			}
			if = { limit = { NOT = { check_variable = { which = spellHit value = 12 } } }
				if = { limit = { check_variable = { which = spellHit value = 6 } }
					if = { limit = { check_variable = { which = spellHit value = 9 } }
						if = { limit = { check_variable = { which = spellHit value = 10 } }
							if = { limit = { check_variable = { which = spellHit value = 11 } }
								random_list = { 11 = { take_spell_damage = yes } 89 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 11 } } }
								random_list = { 10 = { take_spell_damage = yes } 90 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 10 } } }
							random_list = { 9 = { take_spell_damage = yes } 91 = { set_ruler_flag = dodged_spell } }
						}
					}
					if = { limit = { NOT = { check_variable = { which = spellHit value = 9 } } }
						if = { limit = { check_variable = { which = spellHit value = 7 } }
							if = { limit = { check_variable = { which = spellHit value = 8 } }
								random_list = { 8 = { take_spell_damage = yes } 92 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 8 } } }
								random_list = { 7 = { take_spell_damage = yes } 93 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 7 } } }
							random_list = { 6 = { take_spell_damage = yes } 94 = { set_ruler_flag = dodged_spell } }
						}
					}
				}
				if = { limit = { NOT = { check_variable = { which = spellHit value = 6 } } }
					if = { limit = { check_variable = { which = spellHit value = 3 } }
						if = { limit = { check_variable = { which = spellHit value = 4 } }
							if = { limit = { check_variable = { which = spellHit value = 5 } }
								random_list = { 5 = { take_spell_damage = yes } 95 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 5 } } }
								random_list = { 4 = { take_spell_damage = yes } 96 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 4 } } }
							random_list = { 3 = { take_spell_damage = yes } 97 = { set_ruler_flag = dodged_spell } }
						}
					}
					if = { limit = { NOT = { check_variable = { which = spellHit value = 3 } } }
						if = { limit = { check_variable = { which = spellHit value = 1 } }
							if = { limit = { check_variable = { which = spellHit value = 2 } }
								random_list = { 2 = { take_spell_damage = yes } 98 = { set_ruler_flag = dodged_spell } }
							}
							if = { limit = { NOT = { check_variable = { which = spellHit value = 2 } } }
								random_list = { 1 = { take_spell_damage = yes } 99 = { set_ruler_flag = dodged_spell } }
							}
						}
						if = { limit = { NOT = { check_variable = { which = spellHit value = 1 } } }
							random_list = { 0 = { take_spell_damage = yes } 100 = { set_ruler_flag = dodged_spell } }
						}
					}
				}
			}
		}
	}
}
