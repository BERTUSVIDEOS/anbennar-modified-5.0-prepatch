
# These are the effects used to lower/increase different tolerances
# These are here to make it easier for the devs to mod events (also allows smaller adjustment of event effects)
# All of these either increase or decrease the current tolerance by 5, 10, 15 or 20.


clear_racial_administration = {
	remove_country_modifier = elven_administration
	remove_country_modifier = dwarven_administration
	remove_country_modifier = gnomish_administration
	remove_country_modifier = half_orcish_administration
	remove_country_modifier = half_elven_administration
	remove_country_modifier = kobold_administration
	remove_country_modifier = troll_administration
	remove_country_modifier = halfling_administration
	remove_country_modifier = harpy_administration
	remove_country_modifier = human_administration
	remove_country_modifier = orcish_administration
	remove_country_modifier = goblin_administration
	remove_country_modifier = gnollish_administration
	remove_country_modifier = ruinborn_administration
	remove_country_modifier = centaur_administration
	remove_country_modifier = harimari_administration
	remove_country_modifier = ogre_administration
	remove_country_modifier = hobgoblin_administration
	remove_country_modifier = lizardfolk_administration
}

clear_racial_military = {
	remove_country_modifier = elven_military
	remove_country_modifier = dwarven_military
	remove_country_modifier = gnomish_military
	remove_country_modifier = half_orcish_military
	remove_country_modifier = half_elven_military
	remove_country_modifier = kobold_military
	remove_country_modifier = troll_military
	remove_country_modifier = halfling_military
	remove_country_modifier = harpy_military
	remove_country_modifier = human_military
	remove_country_modifier = orcish_military
	remove_country_modifier = goblin_military
	remove_country_modifier = gnollish_military
	remove_country_modifier = ruinborn_military
	remove_country_modifier = centaur_military
	remove_country_modifier = harimari_military
	remove_country_modifier = ogre_military
	remove_country_modifier = hobgoblin_military
	remove_country_modifier = lizardfolk_military
	#BERTUS MOD racial links
	if = { limit = { NOT = { has_country_flag = elite_marine_flag has_country_modifier = gnollish_military has_idea = A11_seafaring_traditions has_idea = Z50_ambitions_of_temar_ironsea has_idea = A02_reaver_blood } } remove_country_modifier = elite_marine_modifier }
	if = { limit = { NOT = { has_country_modifier = goblin_military check_variable = { which = fungi value = 10 } } } remove_country_modifier = goblin_fungi_fanatic_modifier }
}

clear_racial_pop_migration_flags = {
	clr_country_flag = racial_pop_migrate_adjacent
	clr_country_flag = racial_pop_migrate_within_country
	clr_country_flag = racial_pop_migrate_outside_country

	clr_country_flag = racial_pop_migrate_colony

}

clear_racial_pop_tolerance_chance_flags = {
	clr_country_flag = racial_pop_small_increase
	clr_country_flag = racial_pop_medium_increase
	clr_country_flag = racial_pop_large_increase
	clr_country_flag = racial_pop_largest_increase

	clr_country_flag = racial_pop_small_decrease
	clr_country_flag = racial_pop_medium_decrease
	clr_country_flag = racial_pop_large_decrease
	clr_country_flag = racial_pop_largest_decrease
}

save_primary_culture = {
	ROOT = { export_to_variable = { value = primary_culture which = my_primary_culture } }
}

lock_racial_admin = {
    if = { 
        limit = { end_game_tags_blocked = yes }
        custom_tooltip = locked_racial_administration_tt
        hidden_effect = {
            save_primary_culture = yes
            set_country_flag = locked_racial_administration
        }
    }
}

remove_racial_modifiers = {	#bertus mod
	if = {
		limit = { has_gnomish_minority_trigger = no culture_is_gnomish = no }
		remove_province_modifier = gnomish_institute_gommo 
		remove_province_modifier = aqatbar_gnome_quarter
		remove_province_modifier = rayavhashapal_gnome_quarter
		remove_province_modifier = port_jaher_gnome_quarter
		remove_province_modifier = feiten_gnome_quarter
		remove_province_modifier = kherka_gnome_quarter
		remove_province_modifier = camsinh_gnome_quarter
		remove_province_modifier = arawkelin_gnome_quarter
		remove_province_modifier = tianlou_gnome_quarter
		remove_province_modifier = sarisung_gnome_quarter
		remove_province_modifier = maoji_gnome_quarter
		clr_province_flag = special_gnomish_quarter_gommo
	}
}

#This should be use in a province scope
update_racial_province_modifier_tolerance = {
	if = {
		limit = { has_unmatching_$RACE$_tolerance_trigger = yes }
		if = {
			limit = { owner = { high_tolerance_$RACE$_race_trigger = yes } }
			if = {
				limit = { has_small_$RACE$_minority_trigger = yes }
				add_permanent_province_modifier = { name = $RACE$_minority_integrated_small duration = -1 }
				remove_province_modifier = $RACE$_minority_oppressed_small
				remove_province_modifier = $RACE$_minority_coexisting_small
			}
			else_if = {
				limit = { has_large_$RACE$_minority_trigger = yes }
				add_permanent_province_modifier = { name = $RACE$_minority_integrated_large duration = -1 }
				remove_province_modifier = $RACE$_minority_oppressed_large
				remove_province_modifier = $RACE$_minority_coexisting_large
			}
			else_if = {
				limit = { has_$RACE$_majority_trigger = yes }
				add_permanent_province_modifier = { name = $RACE$_majority_integrated duration = -1 }
				remove_province_modifier = $RACE$_majority_oppressed
				remove_province_modifier = $RACE$_majority_coexisting
				remove_province_modifier = $RACE$_majority_primary
			}
		}
		else_if = {
			limit = { owner = { medium_tolerance_$RACE$_race_trigger = yes } }
			if = {
				limit = { has_small_$RACE$_minority_trigger = yes }
				add_permanent_province_modifier = { name = $RACE$_minority_coexisting_small duration = -1 }
				remove_province_modifier = $RACE$_minority_oppressed_small
				remove_province_modifier = $RACE$_minority_integrated_small
			}
			else_if = {
				limit = { has_large_$RACE$_minority_trigger = yes }
				add_permanent_province_modifier = { name = $RACE$_minority_coexisting_large duration = -1 }
				remove_province_modifier = $RACE$_minority_oppressed_large
				remove_province_modifier = $RACE$_minority_integrated_large
			}
			else_if = {
				limit = { has_$RACE$_majority_trigger = yes }
				add_permanent_province_modifier = { name = $RACE$_majority_coexisting duration = -1 }
				remove_province_modifier = $RACE$_majority_oppressed
				remove_province_modifier = $RACE$_majority_integrated
				remove_province_modifier = $RACE$_majority_primary
			}
		}
		else_if = {
			limit = { owner = { low_tolerance_$RACE$_race_trigger = yes } }
			if = {
				limit = { has_small_$RACE$_minority_trigger = yes }
				add_permanent_province_modifier = { name = $RACE$_minority_oppressed_small duration = -1 }
				remove_province_modifier = $RACE$_minority_integrated_small
				remove_province_modifier = $RACE$_minority_coexisting_small
			}
			else_if = {
				limit = { has_large_$RACE$_minority_trigger = yes }
				add_permanent_province_modifier = { name = $RACE$_minority_oppressed_large duration = -1 }
				remove_province_modifier = $RACE$_minority_integrated_large
				remove_province_modifier = $RACE$_minority_coexisting_large
			}
			else_if = {
				limit = { has_$RACE$_majority_trigger = yes }
				add_permanent_province_modifier = { name = $RACE$_majority_oppressed duration = -1 }
				remove_province_modifier = $RACE$_majority_integrated
				remove_province_modifier = $RACE$_majority_primary
				remove_province_modifier = $RACE$_majority_coexisting
			}
		}
	}
}

#This should be use in a province scope
update_specific_racial_province_modifier_tolerance = { #$RACE$ = the race you're checking for
	if = {
		limit = { has_unmatching_$RACE$_tolerance_trigger = yes }
		if = {
			limit = { owner = { high_tolerance_$RACE$_race_trigger = yes } }
			if = {
				limit = { has_small_$RACE$_minority_trigger = yes }
				add_permanent_province_modifier = { name = $RACE$_minority_integrated_small duration = -1 }
				remove_province_modifier = $RACE$_minority_oppressed_small
				remove_province_modifier = $RACE$_minority_coexisting_small
			}
			else_if = {
				limit = { has_large_$RACE$_minority_trigger = yes }
				add_permanent_province_modifier = { name = $RACE$_minority_integrated_large duration = -1 }
				remove_province_modifier = $RACE$_minority_oppressed_large
				remove_province_modifier = $RACE$_minority_coexisting_large
			}
			else_if = {
				limit = { has_$RACE$_majority_trigger = yes }
				add_permanent_province_modifier = { name = $RACE$_majority_integrated duration = -1 }
				remove_province_modifier = $RACE$_majority_primary
				remove_province_modifier = $RACE$_majority_oppressed
				remove_province_modifier = $RACE$_majority_coexisting
			}
		}
		else_if = {
			limit = { owner = { medium_tolerance_$RACE$_race_trigger = yes } }
			if = {
				limit = { has_small_$RACE$_minority_trigger = yes }
				add_permanent_province_modifier = { name = $RACE$_minority_coexisting_small duration = -1 }
				remove_province_modifier = $RACE$_minority_oppressed_small
				remove_province_modifier = $RACE$_minority_integrated_small
			}
			else_if = {
				limit = { has_large_$RACE$_minority_trigger = yes }
				add_permanent_province_modifier = { name = $RACE$_minority_coexisting_large duration = -1 }
				remove_province_modifier = $RACE$_minority_oppressed_large
				remove_province_modifier = $RACE$_minority_integrated_large
			}
			else_if = {
				limit = { has_$RACE$_majority_trigger = yes }
				add_permanent_province_modifier = { name = $RACE$_majority_coexisting duration = -1 }
				remove_province_modifier = $RACE$_majority_oppressed
				remove_province_modifier = $RACE$_majority_integrated
				remove_province_modifier = $RACE$_majority_primary
			}
		}
		else_if = {
			limit = { owner = { low_tolerance_$RACE$_race_trigger = yes } }
			if = {
				limit = { has_small_$RACE$_minority_trigger = yes }
				add_permanent_province_modifier = { name = $RACE$_minority_oppressed_small duration = -1 }
				remove_province_modifier = $RACE$_minority_integrated_small
				remove_province_modifier = $RACE$_minority_coexisting_small
			}
			else_if = {
				limit = { has_large_$RACE$_minority_trigger = yes }
				add_permanent_province_modifier = { name = $RACE$_minority_oppressed_large duration = -1 }
				remove_province_modifier = $RACE$_minority_integrated_large
				remove_province_modifier = $RACE$_minority_coexisting_large
			}
			else_if = {
				limit = { has_$RACE$_majority_trigger = yes }
				add_permanent_province_modifier = { name = $RACE$_majority_oppressed duration = -1 }
				remove_province_modifier = $RACE$_majority_primary
				remove_province_modifier = $RACE$_majority_integrated
				remove_province_modifier = $RACE$_majority_coexisting
			}
		}
	}
}
update_all_racial_province_majority = {
	if = {
		limit = {
			has_$RACE$_majority_trigger = yes
			OR = {
				[[human] NOT = { culture_is_$RACE$ = yes} ]
				[[elven] NOT = { culture_group = $RACE$ } ]
				[[dwarven] NOT = { culture_group = $RACE$ } ]
				[[gnomish] NOT = { culture_group = $RACE$ } ]
				[[halfling] NOT = { culture_group = $RACE$ } ]
				[[gnomish] NOT = { culture_group = $RACE$ } ]
				[[ruinborn] NOT = { culture_is_$RACE$ = yes} ]
				[[harimari] NOT = { culture_group = $RACE$ } ]
				[[orcish] NOT = { culture_group = $RACE$ } ]
				[[goblin] NOT = { culture_group = $RACE$ } ]
				[[ogre] NOT = { culture_group = $RACE$ } ]
				[[centaur] NOT = { culture_group = $RACE$ } ]
				[[troll ] NOT = { culture_is_$RACE$ = yes} ]
				[[harpy] NOT = { culture_group = $RACE$ } ]
				[[half_orcish] NOT = { culture_is_$RACE$ = yes} ]
				[[half_elven ] NOT = { culture_is_$RACE$ = yes} ]
				[[kobold] NOT = { culture_group = $RACE$ } ]
				[[hobgoblin] NOT = { culture_group = $RACE$ } ]
				[[lizardfolk] NOT = { culture_group = $RACE$ } ]
				[[lizardfolk] NOT = { culture_group = adzalan_$RACE$ } ]
			}
		}
		add_permanent_province_modifier = { name = $RACE$_minority_coexisting_large duration = -1 }
		remove_province_modifier = $RACE$_majority_primary
		remove_province_modifier = $RACE$_majority_integrated
		remove_province_modifier = $RACE$_majority_coexisting
		remove_province_modifier = $RACE$_majority_oppressed
	}
	if = {
		limit = {
			has_$RACE$_majority_trigger = yes
			OR = {
				[[human] NOT = { culture_is_$RACE$ = yes} ]
				[[elven] NOT = { culture_group = $RACE$ } ]
				[[dwarven] NOT = { culture_group = $RACE$ } ]
				[[gnomish] NOT = { culture_group = $RACE$ } ]
				[[halfling] NOT = { culture_group = $RACE$ } ]
				[[gnomish] NOT = { culture_group = $RACE$ } ]
				[[ruinborn] NOT = { culture_is_$RACE$ = yes} ]
				[[harimari] NOT = { culture_group = $RACE$ } ]
				[[orcish] NOT = { culture_group = $RACE$ } ]
				[[goblin] NOT = { culture_group = $RACE$ } ]
				[[ogre] NOT = { culture_group = $RACE$ } ]
				[[centaur] NOT = { culture_group = $RACE$ } ]
				[[troll ] NOT = { culture_is_$RACE$ = yes} ]
				[[harpy] NOT = { culture_group = $RACE$ } ]
				[[half_orcish] NOT = { culture_is_$RACE$ = yes} ]
				[[half_elven ] NOT = { culture_is_$RACE$ = yes} ]
				[[kobold] NOT = { culture_group = $RACE$ } ]
				[[hobgoblin] NOT = { culture_group = $RACE$ } ]
				[[lizardfolk] NOT = { culture_group = $RACE$ } ]
				[[lizardfolk] NOT = { culture_group = adzalan_$RACE$ } ]
			}
		}
		add_permanent_province_modifier = { name = $RACE$_majority_coexisting duration = -1 }
	}
}

update_racial_province_majority = {
	if = {
		limit = { is_colony = no }	#prevents updating for incomplete colonies
		all_races_effect = { EFFECT = update_all_racial_province_majority }	#bertus mod
		if = { limit = { has_province_modifier = purging_majority } remove_province_modifier = purging_majority }
		if = { limit = { has_province_modifier = expelling_majority } remove_province_modifier = expelling_majority }
	}
	all_races_effect = { EFFECT = update_racial_province_modifier_tolerance }	#bertus mod
	all_races_effect = { EFFECT = make_majority_primary }	#bertus mod
}
cleanup_all_racial_province_minority_into_majority = {
	if = {
		limit = {
			has_$RACE$_minority_trigger = yes
			OR = {
				[[human] NOT = { culture_is_$RACE$ = yes} ]
				[[elven] NOT = { culture_group = $RACE$ } ]
				[[dwarven] NOT = { culture_group = $RACE$ } ]
				[[gnomish] NOT = { culture_group = $RACE$ } ]
				[[halfling] NOT = { culture_group = $RACE$ } ]
				[[gnomish] NOT = { culture_group = $RACE$ } ]
				[[ruinborn] NOT = { culture_is_$RACE$ = yes} ]
				[[harimari] NOT = { culture_group = $RACE$ } ]
				[[orcish] NOT = { culture_group = $RACE$ } ]
				[[goblin] NOT = { culture_group = $RACE$ } ]
				[[ogre] NOT = { culture_group = $RACE$ } ]
				[[centaur] NOT = { culture_group = $RACE$ } ]
				[[troll ] NOT = { culture_is_$RACE$ = yes} ]
				[[harpy] NOT = { culture_group = $RACE$ } ]
				[[half_orcish] NOT = { culture_is_$RACE$ = yes} ]
				[[half_elven ] NOT = { culture_is_$RACE$ = yes} ]
				[[kobold] NOT = { culture_group = $RACE$ } ]
				[[hobgoblin] NOT = { culture_group = $RACE$ } ]
				[[lizardfolk] NOT = { culture_group = $RACE$ } ]
				[[lizardfolk] NOT = { culture_group = adzalan_$RACE$ } ]
			}
		}
		remove_province_modifier = $RACE$_minority_oppressed_small
		remove_province_modifier = $RACE$_minority_coexisting_small
		remove_province_modifier = $RACE$_minority_integrated_small
		remove_province_modifier = $RACE$_minority_oppressed_large
		remove_province_modifier = $RACE$_minority_coexisting_large
		remove_province_modifier = $RACE$_minority_integrated_large
		add_province_modifier = { name = minority_into_majority duration = 3650 }
	}
}
cleanup_racial_province_minority_into_majority = {
	all_races_effect = { EFFECT = cleanup_all_racial_province_minority_into_majority }	#bertus mod
}

make_majority_primary = {
	if = {
		limit = { has_province_modifier = $RACE$_majority_integrated owner = { has_country_modifier = $RACE$_administration } }
		remove_province_modifier = $RACE$_majority_integrated
		add_permanent_province_modifier = { name = $RACE$_majority_primary duration = -1 }
	}
}

#----# Scripted effects for pop menu #----#
pop_menu_main_setup = {
	pop_menu_calculations = yes
	all_races_effect = { EFFECT = cleanup_all_racial_province_minority_into_majority }	#bertus mod
	set_variable = { which = centaurRanking value = 1 }
	set_variable = { which = dwarvenRanking value = 2 }
	set_variable = { which = elvenRanking value = 3 }
	set_variable = { which = gnollishRanking value = 4 }
	set_variable = { which = gnomishRanking value = 5 }
	set_variable = { which = goblinRanking value = 6 }
	set_variable = { which = halflingRanking value = 7 }
	set_variable = { which = half_elvenRanking value = 8 }
	set_variable = { which = half_orcishRanking value = 9 }
	set_variable = { which = harimariRanking value = 10 }
	set_variable = { which = harpyRanking value = 11 }
	set_variable = { which = hobgoblinRanking value = 12 }
	set_variable = { which = humanRanking value = 13 }
	set_variable = { which = koboldRanking value = 14 }
	set_variable = { which = lizardfolkRanking value = 15 }
	set_variable = { which = ogreRanking value = 16 }
	set_variable = { which = orcishRanking value = 17 }
	set_variable = { which = ruinbornRanking value = 18 }
	set_variable = { which = trollRanking value = 19 }
	pop_menu_main_sorting_effect = yes
}

set_variable_to_zero = {
	set_variable = { which = nb$RACE$Majority value = 0 }
	set_variable = { which = nb$RACE$Minority value = 0 }
	set_variable = { which = nb$RACE$Dev value = 0 }
}
pop_menu_calculations = {
	all_races_effect = { EFFECT = set_variable_to_zero }	#bertus mod

	every_owned_province = {
		[[cored]
			limit = { is_state = yes is_state_core = ROOT }
		]
		all_races_effect = { EFFECT = calculate_province_race_values }	#bertus mod
	}
	set_variable = { which = nbTotalDev which = nbcentaurDev }
	change_variable = { which = nbTotalDev which = nbdwarvenDev }
	change_variable = { which = nbTotalDev which = nbelvenDev }
	change_variable = { which = nbTotalDev which = nbgoblinDev }
	change_variable = { which = nbTotalDev which = nbgnollishDev }
	change_variable = { which = nbTotalDev which = nbgnomishDev }
	change_variable = { which = nbTotalDev which = nbhalflingDev }
	change_variable = { which = nbTotalDev which = nbhalf_elvenDev }
	change_variable = { which = nbTotalDev which = nbhalf_orcishDev }
	change_variable = { which = nbTotalDev which = nbharimariDev }
	change_variable = { which = nbTotalDev which = nbharpyDev }
	change_variable = { which = nbTotalDev which = nbhobgoblinDev }
	change_variable = { which = nbTotalDev which = nbhumanDev }
	change_variable = { which = nbTotalDev which = nbkoboldDev }
	change_variable = { which = nbTotalDev which = nblizardfolkDev }
	# change_variable = { which = nbTotalDev which = nbmechanimDev }
	change_variable = { which = nbTotalDev which = nbogreDev }
	change_variable = { which = nbTotalDev which = nborcishDev }
	change_variable = { which = nbTotalDev which = nbruinbornDev }
	change_variable = { which = nbTotalDev which = nbtrollDev }

	pop_menu_round_and_percent = { which = nbcentaurDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbdwarvenDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbelvenDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbgnollishDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbgnomishDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbgoblinDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbhalflingDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbhalf_elvenDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbhalf_orcishDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbharimariDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbharpyDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbhobgoblinDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbhumanDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbkoboldDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nblizardfolkDev total = nbTotalDev }
	# pop_menu_round_and_percent = { which = nbmechanimDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nborcishDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbogreDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbruinbornDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbtrollDev total = nbTotalDev }
}

calculate_province_race_values = {
	if = { limit = { has_$RACE$_majority_trigger = yes }
		export_to_variable = { which = nb$RACE$Dev value = development }
		ROOT = {
			change_variable = { which = nb$RACE$Dev which = PREV }
			change_variable = { which = nb$RACE$Majority value = 1 }
		}
	}
	else_if = { limit = { has_small_$RACE$_minority_trigger = yes }
		export_to_variable = { which = nb$RACE$Dev value = development }
		multiply_variable = { which = nb$RACE$Dev value = 0.05 }
		ROOT = {
			change_variable = { which = nb$RACE$Dev which = PREV }
   			change_variable = { which = nb$RACE$Minority value = 1 }
		}
	}
	else_if = { limit = { has_large_$RACE$_minority_trigger = yes }
		export_to_variable = { which = nb$RACE$Dev value = development }
		multiply_variable = { which = nb$RACE$Dev value = 0.1 }
		ROOT = {
			change_variable = { which = nb$RACE$Dev which = PREV }
   			change_variable = { which = nb$RACE$Minority value = 1 }
		}
	}
}
pop_menu_round_and_percent = {
	divide_variable = { which = $which$ which = $total$ }
	if = { limit = { check_variable = { which = $which$ value = 0.01 } }
		set_variable = { which = temp which = $which$ }
		multiply_variable = { which = temp value = 100 }
		divide_variable = { which = $which$ value = 10 }
		multiply_variable = { which = $which$ value = 1000 }
		subtract_variable = { which = temp which = $which$ }
		if = { limit = { check_variable = { which = temp value = 0.5 } } change_variable = { which = $which$ value = 1 } }
	}
	else = { multiply_variable = { which = $which$ value = 100 } }
}
pop_menu_main_sorting_effect = {
	19 = { set_variable = { which = nbcentaurDev which = PREV } set_variable = { which = nbRaceDev which = nbcentaurDev } set_province_flag = not_sorted }
	18 = { set_variable = { which = nbdwarvenDev which = PREV } set_variable = { which = nbRaceDev which = nbdwarvenDev } set_province_flag = not_sorted }
	17 = { set_variable = { which = nbelvenDev which = PREV } set_variable = { which = nbRaceDev which = nbelvenDev } set_province_flag = not_sorted }
	16 = { set_variable = { which = nbgnollishDev which = PREV } set_variable = { which = nbRaceDev which = nbgnollishDev } set_province_flag = not_sorted }
	15 = { set_variable = { which = nbgnomishDev which = PREV } set_variable = { which = nbRaceDev which = nbgnomishDev } set_province_flag = not_sorted }
	14 = { set_variable = { which = nbgoblinDev which = PREV } set_variable = { which = nbRaceDev which = nbgoblinDev } set_province_flag = not_sorted }
	13 = { set_variable = { which = nbhalf_elvenDev which = PREV } set_variable = { which = nbRaceDev which = nbhalf_elvenDev } set_province_flag = not_sorted }
	12 = { set_variable = { which = nbhalf_orcishDev which = PREV } set_variable = { which = nbRaceDev which = nbhalf_orcishDev } set_province_flag = not_sorted }
	11 = { set_variable = { which = nbhalflingDev which = PREV } set_variable = { which = nbRaceDev which = nbhalflingDev } set_province_flag = not_sorted }
	10 = { set_variable = { which = nbharimariDev which = PREV } set_variable = { which = nbRaceDev which = nbharimariDev } set_province_flag = not_sorted }
	9 = { set_variable = { which = nbharpyDev which = PREV } set_variable = { which = nbRaceDev which = nbharpyDev } set_province_flag = not_sorted }
	8 = { set_variable = { which = nbhobgoblinDev which = PREV } set_variable = { which = nbRaceDev which = nbhobgoblinDev } set_province_flag = not_sorted }
	7 = { set_variable = { which = nbhumanDev which = PREV } set_variable = { which = nbRaceDev which = nbhumanDev } set_province_flag = not_sorted }
	6 = { set_variable = { which = nbkoboldDev which = PREV } set_variable = { which = nbRaceDev which = nbkoboldDev } set_province_flag = not_sorted }
	5 = { set_variable = { which = nblizardfolkDev which = PREV } set_variable = { which = nbRaceDev which = nblizardfolkDev } set_province_flag = not_sorted }
	4 = { set_variable = { which = nbogreDev which = PREV } set_variable = { which = nbRaceDev which = nbogreDev } set_province_flag = not_sorted }
	3 = { set_variable = { which = nborcishDev which = PREV } set_variable = { which = nbRaceDev which = nborcishDev } set_province_flag = not_sorted }
	2 = { set_variable = { which = nbruinbornDev which = PREV } set_variable = { which = nbRaceDev which = nbruinbornDev } set_province_flag = not_sorted }
	1 = { set_variable = { which = nbtrollDev which = PREV } set_variable = { which = nbRaceDev which = nbtrollDev } set_province_flag = not_sorted }

	set_variable = { which = raceRanking value = 0 }
	2 = { save_event_target_as = most_represented_race }
	while = { limit = { NOT = { check_variable = { which = raceRanking value = 19 } } }	#19 = nb of races
		change_variable = { which = raceRanking value = 1 }
		pop_menu_variables = {	#province group that has all the provinces with stored variables
			limit = { has_province_flag = not_sorted check_variable = { which = nbRaceDev which = event_target:most_represented_race } }
			save_event_target_as = most_represented_race
		}
		event_target:most_represented_race = {
			clr_province_flag = not_sorted
			pop_ranking_conversion = yes
			set_variable = { which = nbRaceDev value = 0 }
		}
	}
}

pop_ranking_conversion = {
	if = { limit = { province_id = 19 } ROOT = { set_variable = { which = centaurRanking which = raceRanking } } }
	else_if = { limit = { province_id = 18 } ROOT = { set_variable = { which = dwarvenRanking which = raceRanking } } }
	else_if = { limit = { province_id = 17 } ROOT = { set_variable = { which = elvenRanking which = raceRanking } } }
	else_if = { limit = { province_id = 16 } ROOT = { set_variable = { which = gnollishRanking which = raceRanking } } }
	else_if = { limit = { province_id = 15 } ROOT = { set_variable = { which = gnomishRanking which = raceRanking } } }
	else_if = { limit = { province_id = 14 } ROOT = { set_variable = { which = goblinRanking which = raceRanking } } }
	else_if = { limit = { province_id = 13 } ROOT = { set_variable = { which = half_elvenRanking which = raceRanking } } }
	else_if = { limit = { province_id = 12 } ROOT = { set_variable = { which = half_orcishRanking which = raceRanking } } }
	else_if = { limit = { province_id = 11 } ROOT = { set_variable = { which = halflingRanking which = raceRanking } } }
	else_if = { limit = { province_id = 10 } ROOT = { set_variable = { which = harimariRanking which = raceRanking } } }
	else_if = { limit = { province_id = 9 } ROOT = { set_variable = { which = harpyRanking which = raceRanking } } }
	else_if = { limit = { province_id = 8 } ROOT = { set_variable = { which = hobgoblinRanking which = raceRanking } } }
	else_if = { limit = { province_id = 7 } ROOT = { set_variable = { which = humanRanking which = raceRanking } } }
	else_if = { limit = { province_id = 6 } ROOT = { set_variable = { which = koboldRanking which = raceRanking } } }
	else_if = { limit = { province_id = 5 } ROOT = { set_variable = { which = lizardfolkRanking which = raceRanking } } }
	else_if = { limit = { province_id = 4 } ROOT = { set_variable = { which = ogreRanking which = raceRanking } } }
	else_if = { limit = { province_id = 3 } ROOT = { set_variable = { which = orcishRanking which = raceRanking } } }
	else_if = { limit = { province_id = 2 } ROOT = { set_variable = { which = ruinbornRanking which = raceRanking } } }
	else_if = { limit = { province_id = 1 } ROOT = { set_variable = { which = trollRanking which = raceRanking } } }
}

pop_menu_rank_effect = {
	pop_menu_race_selected_effect = { RACE = centaur ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = dwarven ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = elven ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = gnollish ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = gnomish ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = goblin ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = halfling ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = half_elven ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = half_orcish ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = harimari ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = harpy ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = hobgoblin ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = human ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = kobold ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = lizardfolk ORDER = $ORDER$ }
	# pop_menu_race_selected_effect = { RACE = mechanim ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = ogre ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = orcish ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = ruinborn ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = troll ORDER = $ORDER$ }
}
pop_menu_race_selected_effect = {
	if = { limit = { is_variable_equal = { which = $RACE$Ranking value = $ORDER$ } }
		custom_tooltip = pop_menu_$RACE$_tt
		hidden_effect = {
			pop_menu_cored_dev_calculations = { RACE = $RACE$ }
			country_event = { id = racial_pop_events_$RACE$.12 }
		}
	}
}
pop_menu_cored_dev_calculations = {
	set_variable = { which = nbRaceCoredDev value = 0 }
	set_variable = { which = nbTotalCoredDev value = 0 }
	every_owned_province = {
		limit = { is_state = yes is_state_core = ROOT }
		export_to_variable = { which = nbTotalCoredDev value = development }
		export_to_variable = { which = nbRaceCoredDev value = development }
		if = { limit = { has_$RACE$_majority_trigger = yes } ROOT = { change_variable = { which = nbRaceCoredDev which = PREV } } }
		else_if = { limit = { has_small_$RACE$_minority_trigger = yes } multiply_variable = { which = nbRaceCoredDev value = 0.05 } ROOT = { change_variable = { which = nbRaceCoredDev which = PREV } } }
		else_if = { limit = { has_large_$RACE$_minority_trigger = yes } multiply_variable = { which = nbRaceCoredDev value = 0.1 } ROOT = { change_variable = { which = nbRaceCoredDev which = PREV } } }
		pop_menu_cored_minorities_calculations = yes
		ROOT = {
			change_variable = { which = nbTotalCoredDev which = PREV }
			change_variable = { which = nbTotalCoredDev which = nbMinorityCoredDev }
		}
	}
	pop_menu_round_and_percent = { which = nbRaceCoredDev total = nbTotalCoredDev }
}

pop_menu_cored_minorities_calculations = {
	export_to_variable = { which = nbMinorityCoredDev value = development }
	ROOT = { set_variable = { which = nbMinorityCoredDev value = 0 } }
	if = { limit = { has_small_centaur_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } } }
	else_if = { limit = { has_large_centaur_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } } }
	if = { limit = { has_small_elven_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } } }
	else_if = { limit = { has_large_elven_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } } }
	if = { limit = { has_small_dwarven_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } } }
	else_if = { limit = { has_large_dwarven_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } } }
	if = { limit = { has_small_gnollish_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } } }
	else_if = { limit = { has_large_gnollish_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } } }
	if = { limit = { has_small_gnomish_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } } }
	else_if = { limit = { has_large_gnomish_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } } }
	if = { limit = { has_small_goblin_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } } }
	else_if = { limit = { has_large_goblin_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } } }
	if = { limit = { has_small_half_elven_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } } }
	else_if = { limit = { has_large_half_elven_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } } }
	if = { limit = { has_small_half_orcish_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } } }
	else_if = { limit = { has_large_half_orcish_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } } }
	if = { limit = { has_small_halfling_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } } }
	else_if = { limit = { has_large_halfling_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } } }
	if = { limit = { has_small_harimari_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } } }
	else_if = { limit = { has_large_harimari_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } } }
	if = { limit = { has_small_harpy_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } } }
	else_if = { limit = { has_large_harpy_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } } }
	if = { limit = { has_small_hobgoblin_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } } }
	else_if = { limit = { has_large_hobgoblin_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } } }
	if = { limit = { has_small_human_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } } }
	else_if = { limit = { has_large_human_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } } }
	if = { limit = { has_small_kobold_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } } }
	else_if = { limit = { has_large_kobold_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } } }
	if = { limit = { has_small_lizardfolk_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } } }
	else_if = { limit = { has_large_lizardfolk_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } } }
	# if = { limit = { has_small_mechanism_minority_trigger = yes }
		# ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	# }
	# else_if = { limit = { has_large_mechanism_minority_trigger = yes }
		# ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	# }
	if = { limit = { has_small_ogre_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } } }
	else_if = { limit = { has_large_ogre_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } } }
	if = { limit = { has_small_orcish_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } } }
	else_if = { limit = { has_large_orcish_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } } }
	if = { limit = { has_small_ruinborn_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } } }
	else_if = { limit = { has_large_ruinborn_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } } }
	if = { limit = { has_small_troll_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } } }
	else_if = { limit = { has_large_troll_minority_trigger = yes } ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } } }
	ROOT = { multiply_variable = { which = nbMinorityCoredDev which = PREV } }
}

#----# Change military Menu #-----#
pop_menu_military_setup = {
	pop_menu_calculations = { cored = yes }
	set_variable = { which = centaurRanking value = 1 }
	set_variable = { which = dwarvenRanking value = 2 }
	set_variable = { which = elvenRanking value = 3 }
	set_variable = { which = gnollishRanking value = 4 }
	set_variable = { which = gnomishRanking value = 5 }
	set_variable = { which = goblinRanking value = 6 }
	set_variable = { which = halflingRanking value = 7 }
	set_variable = { which = half_elvenRanking value = 8 }
	set_variable = { which = half_orcishRanking value = 9 }
	set_variable = { which = harimariRanking value = 10 }
	set_variable = { which = harpyRanking value = 11 }
	set_variable = { which = hobgoblinRanking value = 12 }
	set_variable = { which = humanRanking value = 13 }
	set_variable = { which = koboldRanking value = 14 }
	set_variable = { which = lizardfolkRanking value = 15 }
	set_variable = { which = ogreRanking value = 16 }
	set_variable = { which = orcishRanking value = 17 }
	set_variable = { which = ruinbornRanking value = 18 }
	set_variable = { which = trollRanking value = 19 }
	pop_menu_military_sorting_effect = yes
}

pop_menu_military_sorting_setup = {
	set_variable = { which = nb$RACE$Dev which = PREV }
	set_variable = { which = nbRaceDev which = nb$RACE$Dev }
	if = {
		limit = { ROOT = { has_country_modifier = $RACE$_military } }
		ROOT = { set_variable = { which = $RACE$Ranking value = 1 } }
	}
	else_if = {
		limit = { ROOT = { check_variable = { which = nb$RACE$Dev value = 30 } } }
		set_province_flag = available_not_sorted
		save_event_target_as = most_represented_race
	}
	else = {
		set_province_flag = unavailable_not_sorted
		save_event_target_as = most_represented_race
	}
}

pop_menu_military_sorting_effect = {
	19 = { pop_menu_military_sorting_setup = { RACE = centaur } }
	18 = { pop_menu_military_sorting_setup = { RACE = dwarven } }
	17 = { pop_menu_military_sorting_setup = { RACE = elven } }
	16 = { pop_menu_military_sorting_setup = { RACE = gnollish } }
	15 = { pop_menu_military_sorting_setup = { RACE = gnomish } }
	14 = { pop_menu_military_sorting_setup = { RACE = goblin } }
	13 = {
		set_variable = { which = nbRaceDev value = 0 }
		set_variable = { which = raceRanking value = 19 }
		ROOT = { set_variable = { which = half_elvenRanking value = 19 } }
		# pop_menu_military_sorting_setup = { RACE = half_elven }
	}	#half elven military doesn't exist
	12 = { pop_menu_military_sorting_setup = { RACE = half_orcish } }
	11 = { pop_menu_military_sorting_setup = { RACE = halfling } }
	10 = { pop_menu_military_sorting_setup = { RACE = harimari } }
	9 = { pop_menu_military_sorting_setup = { RACE = harpy } }
	8 = { pop_menu_military_sorting_setup = { RACE = hobgoblin } }
	7 = { pop_menu_military_sorting_setup = { RACE = human } }
	6 = { pop_menu_military_sorting_setup = { RACE = kobold } }
	5 = { pop_menu_military_sorting_setup = { RACE = lizardfolk } }
	4 = { pop_menu_military_sorting_setup = { RACE = ogre } }
	3 = { pop_menu_military_sorting_setup = { RACE = orcish } }
	2 = { pop_menu_military_sorting_setup = { RACE = ruinborn } }
	1 = { pop_menu_military_sorting_setup = { RACE = troll } }

	set_variable = { which = raceRanking value = 1 }

	while = { limit = { pop_menu_variables = { has_province_flag = available_not_sorted } }
		change_variable = { which = raceRanking value = 1 }
		pop_menu_variables = {	#province group that has all the provinces with stored variables
			limit = { has_province_flag = available_not_sorted check_variable = { which = nbRaceDev which = event_target:most_represented_race } }
			save_event_target_as = most_represented_race
		}
		event_target:most_represented_race = {
			clr_province_flag = available_not_sorted
			pop_ranking_conversion = yes
			set_variable = { which = nbRaceDev value = 0 }
		}
	}
	while = { limit = { pop_menu_variables = { has_province_flag = unavailable_not_sorted } }
		change_variable = { which = raceRanking value = 1 }
		pop_menu_variables = {	#province group that has all the provinces with stored variables
			limit = { has_province_flag = unavailable_not_sorted check_variable = { which = nbRaceDev which = event_target:most_represented_race } }
			save_event_target_as = most_represented_race
		}
		event_target:most_represented_race = {
			clr_province_flag = unavailable_not_sorted
			pop_ranking_conversion = yes
			set_variable = { which = nbRaceDev value = 0 }
		}
	}
}

pop_menu_military_change_mil_effects = {
	pop_menu_military_change_mil_race = { RACE = centaur ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = dwarven ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = elven ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = gnollish ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = gnomish ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = goblin ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = halfling ORDER = $ORDER$ }
	# pop_menu_military_change_mil_race = { RACE = half_elven ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = half_orcish ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = harimari ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = harpy ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = hobgoblin ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = human ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = kobold ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = lizardfolk ORDER = $ORDER$ }
	# pop_menu_military_change_mil_race = { RACE = mechanism ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = ogre ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = orcish ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = ruinborn ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = troll ORDER = $ORDER$ }
}

pop_menu_military_change_mil_race = {
    if = { limit = { is_variable_equal = { which = $RACE$Ranking value = $ORDER$ } }
        if = { limit = { is_variable_equal = { which = $RACE$Ranking value = 1 } }
            custom_tooltip = pop_military_current_tt
            tooltip = { add_country_modifier = { name = $RACE$_military duration = -1 desc = pop_military_modifier_duration_hidden } }
        }
        else_if = {
            limit = { mil_power = 200 high_tolerance_$RACE$_race_trigger = yes OR = { check_variable = { which = nb$RACE$Dev value = 30 } AND = { has_country_modifier = $RACE$_administration NOT = { primary_culture = sunrise_elf } } } }
            add_mil_power = -200
            clear_racial_military = yes
            add_country_modifier = { name = restructuring_military duration = 3650 }
            add_country_modifier = { name = $RACE$_military duration = -1 }
            pop_menu_military_change_tech = { RACE = $RACE$ ORDER = $ORDER$ }
        }
        else = {
            custom_tooltip = pop_military_change_not_possible_tt
            if = { limit = { NOT = { mil_power = 200 } } custom_tooltip = pop_military_not_enough_milpower_tt }
            if = { limit = { NOT = { high_tolerance_$RACE$_race_trigger = yes } } custom_tooltip = pop_military_tolerance_too_low_tt }
            if = { limit = { NOT = { check_variable = { which = nb$RACE$Dev value = 30 } } } custom_tooltip = pop_military_dev_too_low_tt }
            if = { limit = { has_country_modifier = $RACE$_administration primary_culture = sunrise_elf } custom_tooltip = pop_military_primary_is_sunrise_elf_tt }
            custom_tooltip = pop_military_separator_tt
            tooltip = { add_country_modifier = { name = $RACE$_military duration = -1 desc = pop_military_modifier_duration_hidden } }
        }
    }
}

pop_menu_military_change_tech = {
	if = {
		limit = { is_variable_equal = { which = elvenRanking value = $ORDER$ } }
		if = {
			limit = { OR = { capital_scope = { superregion = deepwoods_superregion } primary_culture = wood_elf AND = { accepted_culture = wood_elf NOT = { culture_group = elven } } } }
			change_unit_type = tech_wood_elf
		}
		else_if = {
			limit = { OR = { primary_culture = sun_elf primary_culture = dawn_elf primary_culture = desert_elf primary_culture = sunrise_elf capital_scope = { continent = asia } capital_scope = { continent = africa } AND = { religion_group = bulwari OR = { capital_scope = { continent = north_america } capital_scope = { continent = south_america } } } AND = { accepted_culture = sun_elf NOT = { culture_group = elven } } AND = { accepted_culture = dawn_elf NOT = { culture_group = elven } } AND = { accepted_culture = desert_elf NOT = { culture_group = elven } } AND = { accepted_culture = sunrise_elf NOT = { culture_group = elven } } } }
			change_unit_type = tech_east_elven
		}
		else = { change_unit_type = tech_elven }
	}
	else_if = {
		limit = { is_variable_equal = { which = half_orcishRanking value = $ORDER$ } }
		if = {
			limit = { OR = { capital_scope = { superregion = gerudia_superregion } primary_culture = grombar_half_orc primary_culture = grombar_orc primary_culture = gray_orc AND = { accepted_culture = grombar_half_orc NOT = { culture_is_half_orcish = yes } } AND = { accepted_culture = grombar_orc NOT = { culture_is_half_orcish = yes } } AND = { accepted_culture = gray_orc NOT = { culture_is_half_orcish = yes } } } }
			change_unit_type = tech_gerudian
		}
		else = { change_unit_type = tech_cannorian }
	}
	else_if = {
		limit = { is_variable_equal = { which = harimariRanking value = $ORDER$ } }
		if = {
			limit = { OR = { capital_scope = { superregion = yanshen_superregion } capital_scope = { superregion = south_haless_superregion } capital_scope = { superregion = north_haless_superregion } primary_culture = serene_harimari primary_culture = roaming_harimari AND = { accepted_culture = serene_harimari NOT = { culture_group = harimari } } AND = { accepted_culture = roaming_harimari NOT = { culture_group = harimari } } } }
			change_unit_type = tech_east_harimari
		}
		else = { change_unit_type = tech_west_harimari }
	}
	else_if = {
		limit = { is_variable_equal = { which = harpyRanking value = $ORDER$ } }
		if = {
			limit = { OR = { capital_scope = { superregion = yanshen_superregion } capital_scope = { superregion = south_haless_superregion } capital_scope = { superregion = north_haless_superregion } primary_culture = feng_harpy AND = { accepted_culture = feng_harpy NOT = { culture_group = harpy } } } }
			change_unit_type = tech_east_harpy
		}
		else = { change_unit_type = tech_harpy }
	}
	else_if = {
		limit = { is_variable_equal = { which = humanRanking value = $ORDER$ } }
		if = { limit = { capital_scope = { superregion = bulwar_superregion } } change_unit_type = tech_bulwari }
		else_if = { limit = { capital_scope = { superregion = west_salahad_superregion } } change_unit_type = tech_salahadesi }
		else_if = { limit = { capital_scope = { superregion = south_salahad_superregion } } change_unit_type = tech_salahadesi }
		else_if = { 
			limit = { capital_scope = { superregion = west_sarhal_superregion } }
		    if = {
				limit = { OR = { accepted_culture = tanizu accepted_culture = dakinshi accepted_culture = antmvura } NOT = { culture_group = tanizu } }
				else = { change_unit_type = tech_tanizu }
			}
			change_unit_type = tech_west_sarhaly
		}
		else_if = { 
			limit = { capital_scope = { superregion = south_sarhal_superregion } }
			if = {
				limit = { OR = { accepted_culture = suhratbi accepted_culture = dhebiji accepted_culture = guryadagga accepted_culture = ashamadi } NOT = { culture_group = baashidi } }
				change_unit_type = tech_baashidi
			}
			else = { change_unit_type = tech_south_sarhaly }
		}
		else_if = { limit = { capital_scope = { superregion = east_sarhal_superregion } } change_unit_type = tech_east_sarhaly }	#wingren again
		else_if = { limit = { capital_scope = { superregion = rahen_superregion } } change_unit_type = tech_raheni }
		else_if = {
			limit = { OR = { capital_scope = { superregion = yanshen_superregion } capital_scope = { superregion = south_haless_superregion } } }
			change_unit_type = tech_halessi
		}
		else_if = { limit = { capital_scope = { superregion = north_haless_superregion } } change_unit_type = tech_shuvuush }
		else_if = { limit = { capital_scope = { superregion = forbidden_lands_superregion } } change_unit_type = tech_triunic }
		else_if = { limit = { capital_scope = { superregion = gerudia_superregion } } change_unit_type = tech_gerudian }
		else = { change_unit_type = tech_cannorian }
	}
	else_if = {
		limit = { is_variable_equal = { which = koboldRanking value = $ORDER$ } }
		if = {
			limit = { OR = { capital_scope = { superregion = yanshen_superregion } capital_scope = { superregion = south_haless_superregion } capital_scope = { superregion = north_haless_superregion } capital_scope = { superregion = rahen_superregion } primary_culture = goldscale_kobold AND = { accepted_culture = goldscale_kobold NOT = { culture_group = kobold } } } }
			change_unit_type = tech_east_kobold
		}
		else = { change_unit_type = tech_kobold }
	}
	else_if = {
		limit = { is_variable_equal = { which = ogreRanking value = $ORDER$ } }
		if = {
			limit = { OR = { capital_scope = { superregion = yanshen_superregion } capital_scope = { superregion = south_haless_superregion } capital_scope = { superregion = north_haless_superregion } capital_scope = { superregion = rahen_superregion } primary_culture = horned_ogre AND = { accepted_culture = horned_ogre NOT = { culture_group = ogre } } } }
			change_unit_type = tech_eastern_ogre
		}
		else = { change_unit_type = tech_ogre }	#may need custom one
	}
	else_if = {
		limit = { is_variable_equal = { which = orcishRanking value = $ORDER$ } }
		if = {
			limit = { OR = { capital_scope = { continent = serpentspine } primary_culture = black_orc AND = { accepted_culture = black_orc NOT = { culture_group = orcish } } } }
			change_unit_type = tech_black_orcish
		}
		else_if = {
			limit = { OR = { capital_scope = { continent = asia NOT = { superregion = forbidden_lands_superregion } } primary_culture = brown_orc AND = { accepted_culture = brown_orc NOT = { culture_group = orcish } } } }
			change_unit_type = tech_east_orcish
		}
		else = { change_unit_type = tech_orcish }
	}
	else_if = {
		limit = { is_variable_equal = { which = ruinbornRanking value = $ORDER$ } }
		if = { limit = { OR = { capital_scope = { superregion = ynn_superregion } capital_scope = { region = forest_of_the_cursed_ones_region } } } change_unit_type = tech_ynnic }
		else_if = { limit = { capital_scope = { superregion = eordand_superregion } } change_unit_type = tech_eordand }
		else_if = { limit = { OR = { culture_group = devandi_ruinborn_elf culture_group = eltibhari_ruinborn_elf capital_scope = { region = chendhya_region } } } change_unit_type = tech_bharbhen }
		else_if = { limit = { capital_scope = { superregion = kheionai_superregion } } change_unit_type = tech_kheionai }
		else_if = { limit = { capital_scope = { superregion = greater_taychend_superregion } } change_unit_type = tech_taychendi }
		else_if = { limit = { OR = { capital_scope = { region = haraf_region } capital_scope = { region = tor_nayyi_region } } } change_unit_type = tech_harafic }
		else_if = { limit = { OR = { capital_scope = { superregion = north_aelantir_superregion } capital_scope = { superregion = ruined_sea_superregion } } } change_unit_type = tech_noruin }
		else_if = {
			limit = { OR = { capital_scope = { superregion = effelai_superregion } capital_scope = { region = amadia_region } } }
			if = {
				limit = { OR = { culture_group = eltibhari_ruinborn_elf culture_group = devandi_ruinborn_elf } }
				change_unit_type = tech_bharbhen
			}
			else = { change_unit_type = tech_south_aelantiri }
		}
		else = { change_unit_type = tech_noruin }
	}
	else_if = {
        limit = { is_variable_equal = { which = trollRanking value = $ORDER$ } }
        if = {
            limit = { OR = { capital_scope = { superregion = east_sarhal_superregion } primary_culture = swamp_troll AND = { accepted_culture = swamp_troll NOT = { culture_group = giantkind } } } }
            change_unit_type = tech_swamp_troll
        }
        else = { change_unit_type = tech_troll }    #may need custom one
    }
	else_if = {
        limit = { is_variable_equal = { which = halflingRanking value = $ORDER$ } }
        if = {
            limit = {
                OR = {
                    capital_scope = { superregion = west_sarhal_superregion }
					culture_group = vyzemby
                    AND = { OR = { accepted_culture = amezatany accepted_culture = mboala accepted_culture = mazava accepted_culture = fomarati accepted_culture = vyoronsi } NOT = { culture_group = vyzemby } }
                }
            }
            change_unit_type = tech_vyzemby
        }
        else = { change_unit_type = tech_halfling }    #may need custom one
    }
	else = { change_unit_type = tech_$RACE$ }
}

update_unit_sprites_for_racial_mil = {
	if = {
		limit = { has_country_modifier = human_military }
		if = {
			limit = { capital_scope = { superregion = rahen_superregion } }
			custom_tooltip = swap_to_human_raheni_sprites_tooltip
			hidden_effect = { apply_sprite_pack = indiangfx_sprite_pack }
		}
		else_if = {
			limit = { capital_scope = { OR = { superregion = south_haless_superregion superregion = yanshen_superregion } } }
			custom_tooltip = swap_to_human_yanshen_sprites_tooltip
			hidden_effect = { apply_sprite_pack = asiangfx_sprite_pack }
		}	
		else_if = { limit = { capital_scope = { OR = { superregion = north_haless_superregion } } }
			custom_tooltip = swap_to_human_triunic_sprites_tooltip
			hidden_effect = { apply_sprite_pack = triunicgfx_sprite_pack }
		}
		else_if = {
			limit = { capital_scope = { OR = { superregion = east_sarhal_superregion superregion = south_sarhal_superregion } } }
			custom_tooltip = swap_to_human_east_sarhal_sprites_tooltip
			hidden_effect = { apply_sprite_pack = africangfx_sprite_pack }
		}
		else_if = {
			limit = { capital_scope = { OR = { superregion = fangaula_superregion superregion = south_salahad_superregion superregion = bulwar_superregion } } }
			custom_tooltip = swap_to_human_bulwar_sprites_tooltip
			hidden_effect = { apply_sprite_pack = muslimgfx_sprite_pack }
		}
		else_if = {
			limit = { capital_scope = { OR = { continent = north_america continent = south_america } } }
			custom_tooltip = swap_to_human_aelantir_sprites_tooltip
			hidden_effect = { apply_sprite_pack = divenhalgfx_sprite_pack }
		}
		else = { custom_tooltip = swap_to_human_cannorian_sprites_tooltip hidden_effect = { apply_sprite_pack = westerngfx_sprite_pack } }	# cannor and gerudia (default fallback)
	}
	else_if = {
		limit = { has_country_modifier = elven_military }
		if = {
			limit = { capital_scope = { superregion = deepwoods_superregion } }
			custom_tooltip = swap_to_wood_elven_sprites_tooltip
			hidden_effect = { apply_sprite_pack = moon_elf_sprite_pack }
		}
		else_if = {
			limit = { capital_scope = { OR = { region = far_salahad_region region = far_bulwar_region } } }
			custom_tooltip = swap_to_desert_elven_sprites_tooltip
			hidden_effect = { apply_sprite_pack = moon_elf_sprite_pack }
		}
		else_if = {
			limit = { capital_scope = { OR = { superregion = bulwar_superregion continent = south_america } } }
			custom_tooltip = swap_to_sun_elven_sprites_tooltip
			hidden_effect = { apply_sprite_pack = moon_elf_sprite_pack }
		}
		else = {
			custom_tooltip = swap_to_moon_elven_sprites_tooltip
			hidden_effect = { apply_sprite_pack = moon_elf_sprite_pack }
		}
	}
	else_if = {
		limit = { has_country_modifier = dwarven_military }
		custom_tooltip = swap_to_dwarven_sprites_tooltip
		hidden_effect = { apply_sprite_pack = group_dwarves_sprite_pack }
	}
	else_if = {
		limit = { has_country_modifier = halfling_military }
		if = {
			limit = { capital_scope = { region = fahvanosy_region } }
			custom_tooltip = swap_to_vyzemby_halfling_sprites_tooltip
			hidden_effect = { apply_sprite_pack = africangfx_sprite_pack }
		}
		else = { custom_tooltip = swap_to_redfoot_halfling_sprites_tooltip hidden_effect = { apply_sprite_pack = redfoot_sprite_pack } }	# redfoot (default fallback)
	}
	else_if = {
		limit = { has_country_modifier = gnomish_military }
		custom_tooltip = swap_to_gnomish_sprites_tooltip
		hidden_effect = { apply_sprite_pack = westerngfx_sprite_pack }
	}
	else_if = {
		limit = { has_country_modifier = kobold_military }
		if = {
			limit = { capital_scope = { region = alenic_frontier_region } }
			custom_tooltip = swap_to_greenscale_kobold_sprites_tooltip
			hidden_effect = { apply_sprite_pack = greenscale_sprite_pack }
		}
		else_if = {
			limit = { capital_scope = { continent = asia } }
			custom_tooltip = swap_to_goldscale_kobold_sprites_tooltip
			hidden_effect = { apply_sprite_pack = goldscale_sprite_pack }
		}
		else = { custom_tooltip = swap_to_redscale_kobold_sprites_tooltip hidden_effect = { apply_sprite_pack = redscale_sprite_pack } }	# redscale (default fallback)
	}
	else_if = { 
		limit = { has_country_modifier = orcish_military }
		if = {
			limit = { capital_scope = { superregion = gerudia_superregion } }
			custom_tooltip = swap_to_gray_orcish_sprites_tooltip
			hidden_effect = { apply_sprite_pack = gray_orc_sprite_pack }
		}
		else_if = {
			limit = { capital_scope = { continent = serpentspine } }
			custom_tooltip = swap_to_black_orcish_sprites_tooltip
			hidden_effect = { apply_sprite_pack = black_orc_sprite_pack }
		}
		else_if = {
			limit = { capital_scope = { continent = asia } }
			custom_tooltip = swap_to_brown_orcish_sprites_tooltip
			hidden_effect = { apply_sprite_pack = brown_orc_sprite_pack }
		}
		else = { custom_tooltip = swap_to_green_orcish_sprites_tooltip hidden_effect = { apply_sprite_pack = green_orc_sprite_pack } }
	}
	else_if = { 
		limit = { has_country_modifier = half_orcish_military }
		if = {
			limit = { capital_scope = { continent = asia } }
			custom_tooltip = swap_to_raheni_half_orcish_sprites_tooltip
			hidden_effect = { apply_sprite_pack = indiangfx_sprite_pack }
		}
		else = {
			custom_tooltip = swap_to_cannorian_half_orcish_sprites_tooltip
			hidden_effect = { apply_sprite_pack = westerngfx_sprite_pack }
		}
	}
	else_if = {
		limit = { has_country_modifier = gnollish_military }
		custom_tooltip = swap_to_gnollish_sprites_tooltip
		hidden_effect = { apply_sprite_pack = gnoll_sprite_pack }
	}
	else_if = {
		limit = { has_country_modifier = ruinborn_military }
		if = {
			limit = { capital_scope = { superregion = kheionai_superregion } }
			custom_tooltip = swap_to_kheionai_ruinborn_sprites_tooltip
			hidden_effect = { apply_sprite_pack = kheionai_cool_units_sprite_pack }
		}
		else_if = {
			limit = { capital_scope = { OR = { superregion = eordand_superregion } } }
			custom_tooltip = swap_to_eordand_ruinborn_sprites_tooltip
			hidden_effect = { apply_sprite_pack = southamericagfx_sprite_pack }
		}
		else_if = {
			limit = { capital_scope = { OR = {superregion = effelai_superregion } } }
			custom_tooltip = swap_to_effelai_ruinborn_sprites_tooltip
			hidden_effect = { apply_sprite_pack = northamericagfx_sprite_pack }
		}
		else = { custom_tooltip = swap_to_ynnic_ruinborn_sprites_tooltip hidden_effect = { apply_sprite_pack = easterngfx_sprite_pack } }	# ynnic (default fallback)
	}
	else_if = {
		limit = { has_country_modifier = goblin_military }
		if = {
			limit = { capital_scope = { superregion = bulwar_superregion } }
			custom_tooltip = swap_to_exodus_goblin_sprites_tooltip
			hidden_effect = { apply_sprite_pack = exodus_goblin_sprite_pack }
		}
		else_if = {
			limit = { capital_scope = { superregion = deepwoods_superregion } }
			custom_tooltip = swap_to_forest_goblin_ruinborn_sprites_tooltip
			hidden_effect = { apply_sprite_pack = forest_goblin_sprite_pack }
		}
		else_if = {
			limit = { capital_scope = { continent = serpentspine } }
			custom_tooltip = swap_to_cave_goblin_sprites_tooltip
			hidden_effect = { apply_sprite_pack = cave_goblin_sprite_pack }
		}
		else = {
			custom_tooltip = swap_to_common_goblin_sprites_tooltip
			hidden_effect = { apply_sprite_pack = common_goblin_sprite_pack }
		}
	}
	else_if = {
		limit = { has_country_modifier = harpy_military }
		custom_tooltip = swap_to_harpy_sprites_tooltip
		hidden_effect = { apply_sprite_pack = harpy_sprite_pack }
	}
	else_if = {
		limit = { has_country_modifier = troll_military }
		if = {
			limit = { capital_scope = { region = yezel_mora_region } }
			custom_tooltip = swap_to_swamp_troll_sprites_tooltip
			hidden_effect = { apply_sprite_pack = africangfx_sprite_pack }
		}
		else = { custom_tooltip = swap_to_gerudian_troll_sprites_tooltip hidden_effect = { apply_sprite_pack = westerngfx_sprite_pack } }	# gerudian trolls (default fallback)
	}
	else_if = {
		limit = { has_country_modifier = half_elven_military }
		if = {
			limit = { capital_scope = { OR = { superregion = bulwar_superregion } } }
			custom_tooltip = swap_to_bulwari_half_elven_sprites_tooltip
			hidden_effect = { apply_sprite_pack = muslimgfx_sprite_pack }
		}
		else = { custom_tooltip = swap_to_cannorian_half_elven_sprites_tooltip hidden_effect = { apply_sprite_pack = westerngfx_sprite_pack } }	# cannor (default fallback)
	}
	else_if = {
		limit = { has_country_modifier = harimari_military }
		custom_tooltip = swap_to_harimari_sprites_tooltip
		hidden_effect = { apply_sprite_pack = harimari_sprite_pack }
	}
	else_if = {
		limit = { has_country_modifier = hobgoblin_military }
		custom_tooltip = swap_to_hobgoblin_sprites_tooltip
		hidden_effect = { apply_sprite_pack = hobgoblin_sprite_pack }
	}
	else_if = {
		limit = { has_country_modifier = centaur_military }
		custom_tooltip = swap_to_centaur_sprites_tooltip
		hidden_effect = { apply_sprite_pack = centaur_sprite_pack }
	}
	else_if = {	# TODO update if ogres get unique models
		limit = { has_country_modifier = ogre_military }
		if = { limit = { capital_scope = { region = demon_hills_region } } custom_tooltip = swap_to_oni_sprites_tooltip hidden_effect = { apply_sprite_pack = asiangfx_sprite_pack } }	# oni
		else = { custom_tooltip = swap_to_ogre_sprites_tooltip hidden_effect = { apply_sprite_pack = westerngfx_sprite_pack } }	# forbidden plains/miremaw ogres (default fallback)
	}
	else_if = {
		limit = { has_country_modifier = lizardfolk_military }
		# TODO update if lizardfolk get unique models
		custom_tooltip = swap_to_lizardfolk_sprites_tooltip
		hidden_effect = { apply_sprite_pack = muslimgfx_sprite_pack }
	}
}

generic_start_purge = {
	if = {
		limit = { NOT = { has_country_modifier = racial_pop_$race$_purge } }
		if = { limit = { NOT = { has_country_flag = unlimited_genocide } } generic_increase_state_action_malus = { action = genocide } }
		add_country_modifier = { name = racial_pop_$race$_purge duration = -1 desc = while_policy_active }
		generic_decrease_of_racial_tolerance_effect = { race = $race$ largest = yes }
		custom_tooltip = racial_pop_events_debug.3.tooltip
		custom_tooltip = pop_menu_purge_effect_unrest_tt
		hidden_effect = {
			if = { limit = { ai = yes } country_event = { id = racial_pop_events_$race$.14 days = 1 } }
			if = { limit = { ai = no } country_event = { id = race_setup_events.9 days = 1 } }
			every_owned_province = { limit = { has_small_$race$_minority_trigger = yes } add_unrest = 5 }
			every_owned_province = { limit = { has_large_$race$_minority_trigger = yes } add_unrest = 7 }
			every_owned_province = { limit = { has_$race$_majority_trigger = yes } add_unrest = 15 }
		}
	}
}
generic_start_expulsion = {
	if = {
		limit = { NOT = { has_country_modifier = racial_pop_$race$_expulsion } }
		generic_increase_state_action_malus = { action = genocide }
		add_country_modifier = { name = racial_pop_$race$_expulsion duration = -1 desc = while_policy_active }
		generic_decrease_of_racial_tolerance_effect = { race = $race$ large = yes }
		custom_tooltip = racial_pop_events_debug.2.tooltip
		custom_tooltip = pop_menu_expel_effect_unrest_tt
		hidden_effect = {
			if = { limit = { ai = yes } country_event = { id = racial_pop_events_$race$.13 days = 1 } }
			if = { limit = { ai = no } country_event = { id = race_setup_events.9 days = 1 } }
			every_owned_province = { limit = { has_small_$race$_minority_trigger = yes } add_unrest = 2 }
			every_owned_province = { limit = { has_large_$race$_minority_trigger = yes } add_unrest = 5 }
			every_owned_province = { limit = { has_$race$_majority_trigger = yes } add_unrest = 10 }
		}
	}
}
generic_start_focus = {
	if = {
		limit = { NOT = { has_country_modifier = racial_focus_$race$ } }
		generic_increase_state_action_malus = { action = focus }
		add_country_modifier = { name = racial_focus_$race$ duration = -1  desc = while_policy_active}
	}
}
generic_end_purge = {
	if = {
		limit = { has_country_modifier = racial_pop_$race$_purge }
		generic_decrease_state_action_malus = { action = genocide }
		remove_country_modifier = racial_pop_$race$_purge
		hidden_effect = {
			if = { limit = { ai = yes } country_event = { id = racial_pop_events_$race$.16 days = 1 } }
			if = { limit = { ai = no } country_event = { id = race_setup_events.9 days = 1 } 	}
		}
	}
}
generic_end_expulsion = {
	if = {
		limit = { has_country_modifier = racial_pop_$race$_expulsion }
		generic_decrease_state_action_malus = { action = genocide }
		remove_country_modifier = racial_pop_$race$_expulsion
		hidden_effect = {
			if = { limit = { ai = yes } country_event = { id = racial_pop_events_$race$.15 days = 1 } }
			if = { limit = { ai = no } country_event = { id = race_setup_events.9 days = 1 } }
		}
	}
}
generic_end_focus = {
	if = {
		limit = { has_country_modifier = racial_focus_$race$ }
		generic_decrease_state_action_malus = { action = focus }
		remove_country_modifier = racial_focus_$race$
	}
}
generic_purge_expel_opinion_setup = {
	if = {
		limit = {
			ROOT = { has_country_modifier = racial_pop_$race$_expulsion }
			has_country_modifier = $race$_administration
			NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_expelling_race } }
		}
		add_opinion = { who = ROOT modifier = opinion_expelling_race }
		remove_opinion = { who = ROOT modifier = opinion_persecuted_race }
	}
	if = {
		limit = {
			has_opinion_modifier = { who = ROOT modifier = opinion_expelling_race }
			has_country_modifier = $race$_administration
			ROOT = { NOT = { has_country_modifier = racial_pop_$race$_expulsion } }
		}
		remove_opinion = { who = ROOT modifier = opinion_expelling_race }
		add_opinion = { who = ROOT modifier = opinion_persecuted_race }
	}
	if = {
		limit = {
			ROOT = { has_country_modifier = racial_pop_$race$_purge }
			has_country_modifier = $race$_administration
			NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_purging_race } }
		}
		add_opinion = { who = ROOT modifier = opinion_purging_race }
		remove_opinion = { who = ROOT modifier = opinion_persecuted_race }
	}
	if = {
		limit = {
			has_opinion_modifier = { who = ROOT modifier = opinion_purging_race }
			has_country_modifier = $race$_administration
			ROOT = { NOT = { has_country_modifier = racial_pop_$race$_purge } }
		}
		remove_opinion = { who = ROOT modifier = opinion_purging_race }
		add_opinion = { who = ROOT modifier = opinion_persecuted_race }
	}
}
# for newly spawned nations - no point doing the persecuted check here because
# with how it currently works a newly spawned nation would never have one of the two modifiers, so would never get persecuted
generic_purge_expel_opinion_setup_reverse = {
	reverse_remove_opinion = { who = ROOT modifier = opinion_purging_race }
	reverse_remove_opinion = { who = ROOT modifier = opinion_expelling_race }
	if = {
		limit = { ROOT = { has_country_modifier = $race$_administration } }
		if = { limit = { has_country_modifier = racial_pop_$race$_expulsion } reverse_add_opinion = { who = ROOT modifier = opinion_expelling_race } }
		if = { limit = { has_country_modifier = racial_pop_$race$_purge } reverse_add_opinion = { who = ROOT modifier = opinion_purging_race } }
	}
}
racial_purge_disabled_tt =  {
    custom_tooltip = pop_menu_unavailable_tt
    if = { limit = { has_country_modifier = forced_to_end_$RACE$_purge } custom_tooltip = pop_menu_cannot_purge_forced_tt } if = { limit = { has_country_modifier = racial_pop_$RACE$_expulsion } custom_tooltip = pop_menu_cannot_purge_while_expelling_tt } if = { limit = { has_country_modifier = $RACE$_administration } custom_tooltip = pop_menu_cannot_purge_own_race_tt }
    if = { limit = { has_country_modifier = $RACE$_military } custom_tooltip = pop_menu_cannot_purge_military_race_tt }
    if = { limit = { ruler_is_$RACE$ = yes } custom_tooltip = pop_menu_cannot_purge_ruler_race_tt }
    if = { limit = { NOT = { adm_power = 100 } } custom_tooltip = pop_menu_cannot_purge_not_enough_adm_tt }
	if = { limit = { OR = { has_government_attribute = disabled_purging has_government_attribute = disabled_purging_$RACE$ } } custom_tooltip = pop_menu_cannot_purge_government_attribute_tt }
    hidden_effect = { country_event = { id = racial_pop_events_$RACE$.24 } }
}
racial_expel_disabled_tt = {
	custom_tooltip = pop_menu_unavailable_tt
	if = { limit = { has_country_modifier = racial_pop_$RACE$_purge } custom_tooltip = pop_menu_cannot_expel_while_purging_tt }
	if = { limit = { has_country_modifier = $RACE$_administration } custom_tooltip = pop_menu_cannot_expel_own_race_tt }
	if = { limit = { has_country_modifier = $RACE$_military } custom_tooltip = pop_menu_cannot_expel_military_race_tt }
	if = { limit = { ruler_is_$RACE$ = yes } custom_tooltip = pop_menu_cannot_expel_ruler_race_tt }
	if = { limit = { NOT = { adm_power = 50 } } custom_tooltip = pop_menu_cannot_expel_not_enough_adm_tt }
	if = { limit = { OR = { has_government_attribute = disabled_expelling has_government_attribute = disabled_expelling_$RACE$ } } custom_tooltip = pop_menu_cannot_expel_government_attribute_tt }
	hidden_effect = { country_event = { id = racial_pop_events_$RACE$.24 } }
}
racial_focus_disabled_tt = {
	custom_tooltip = pop_menu_unavailable_tt
	if = { limit = { NOT = { can_afford_state_action_diplomat_malus = { action = focus } } } custom_tooltip = pop_menu_need_a_diplomat_tt }
	if = { limit = { NOT = { dip_power = 50 } } custom_tooltip = pop_menu_cannot_focus_not_enough_dip_tt }
}
remove_racial_majority = {
	remove_province_modifier = $RACE$_majority_oppressed
	remove_province_modifier = $RACE$_majority_coexisting
	remove_province_modifier = $RACE$_majority_integrated
	remove_province_modifier = $RACE$_majority_primary
}
remove_all_racial_majority = {
	all_races_effect = { EFFECT = remove_racial_majority }	#bertus mod
}
update_ruler_racial_flag = {
	if = { limit = { ruler_is_half_elven = yes } set_ruler_flag = half_elven_ruler }
	else_if = { limit = { ruler_is_elven = yes } set_ruler_flag = elven_ruler }
	else_if = { limit = { ruler_is_dwarven = yes } set_ruler_flag = dwarven_ruler }
	else_if = { limit = { ruler_is_gnomish = yes } set_ruler_flag = gnomish_ruler }
	else_if = { limit = { ruler_is_human = yes } set_ruler_flag = human_ruler }
	else_if = { limit = { ruler_is_half_orcish = yes } set_ruler_flag = half_orcish_ruler }
	else_if = { limit = { ruler_is_orcish = yes } set_ruler_flag = orcish_ruler }
	else_if = { limit = { ruler_is_goblin = yes } set_ruler_flag = goblin_ruler }
	else_if = { limit = { ruler_is_gnollish = yes } set_ruler_flag = gnollish_ruler }
	else_if = { limit = { ruler_is_kobold = yes } set_ruler_flag = kobold_ruler }
	else_if = { limit = { ruler_is_lizardfolk = yes } set_ruler_flag = lizardfolk_ruler }
	else_if = { limit = { ruler_is_halfling = yes } set_ruler_flag = halfling_ruler }
	else_if = { limit = { ruler_is_harimari = yes } set_ruler_flag = harimari_ruler }
	else_if = { limit = { ruler_is_hobgoblin = yes } set_ruler_flag = hobgoblin_ruler }
	else_if = { limit = { ruler_is_troll = yes } set_ruler_flag = troll_ruler }
	else_if = { limit = { ruler_is_ogre = yes } set_ruler_flag = ogre_ruler }
	else_if = { limit = { ruler_is_harpy = yes } set_ruler_flag = harpy_ruler }
	else_if = { limit = { ruler_is_centaur = yes } set_ruler_flag = centaur_ruler }
	else_if = { limit = { ruler_is_ruinborn = yes } set_ruler_flag = ruinborn_ruler }
}
update_heir_racial_flag = {
	if = { limit = { heir_is_half_elven = yes } set_heir_flag = half_elven_heir }
	else_if = { limit = { heir_is_elven = yes } set_heir_flag = elven_heir }
	else_if = { limit = { heir_is_dwarven = yes } set_heir_flag = dwarven_heir }
	else_if = { limit = { heir_is_gnomish = yes } set_heir_flag = gnomish_heir }
	else_if = { limit = { heir_is_human = yes } set_heir_flag = human_heir }
	else_if = { limit = { heir_is_half_orcish = yes } set_heir_flag = half_orcish_heir }
	else_if = { limit = { heir_is_orcish = yes } set_heir_flag = orcish_heir }
	else_if = { limit = { heir_is_goblin = yes } set_heir_flag = goblin_heir }
	else_if = { limit = { heir_is_gnollish = yes } set_heir_flag = gnollish_heir }
	else_if = { limit = { heir_is_kobold = yes } set_heir_flag = kobold_heir }
	else_if = { limit = { heir_is_lizardfolk = yes } set_heir_flag = lizardfolk_heir }
	else_if = { limit = { heir_is_halfling = yes } set_heir_flag = halfling_heir }
	else_if = { limit = { heir_is_harimari = yes } set_heir_flag = harimari_heir }
	else_if = { limit = { heir_is_hobgoblin = yes } set_heir_flag = hobgoblin_heir }
	else_if = { limit = { heir_is_troll = yes } set_heir_flag = troll_heir }
	else_if = { limit = { heir_is_ogre = yes } set_heir_flag = ogre_heir }
	else_if = { limit = { heir_is_harpy = yes } set_heir_flag = harpy_heir }
	else_if = { limit = { heir_is_centaur = yes } set_heir_flag = centaur_heir }
	else_if = { limit = { heir_is_ruinborn = yes } set_heir_flag = ruinborn_heir }
}
update_consort_racial_flag = {
	if = { limit = { consort_is_half_elven = yes } set_consort_flag = half_elven_consort }
	else_if = { limit = { consort_is_elven = yes } set_consort_flag = elven_consort }
	else_if = { limit = { consort_is_dwarven = yes } set_consort_flag = dwarven_consort }
	else_if = { limit = { consort_is_gnomish = yes } set_consort_flag = gnomish_consort }
	else_if = { limit = { consort_is_human = yes } set_consort_flag = human_consort }
	else_if = { limit = { consort_is_half_orcish = yes } set_consort_flag = half_orcish_consort }
	else_if = { limit = { consort_is_orcish = yes } set_consort_flag = orcish_consort }
	else_if = { limit = { consort_is_goblin = yes } set_consort_flag = goblin_consort }
	else_if = { limit = { consort_is_gnollish = yes } set_consort_flag = gnollish_consort }
	else_if = { limit = { consort_is_kobold = yes } set_consort_flag = kobold_consort }
	else_if = { limit = { consort_is_lizardfolk = yes } set_consort_flag = lizardfolk_consort }
	else_if = { limit = { consort_is_halfling = yes } set_consort_flag = halfling_consort }
	else_if = { limit = { consort_is_harimari = yes } set_consort_flag = harimari_consort }
	else_if = { limit = { consort_is_hobgoblin = yes } set_consort_flag = hobgoblin_consort }
	else_if = { limit = { consort_is_troll = yes } set_consort_flag = troll_consort }
	else_if = { limit = { consort_is_ogre = yes } set_consort_flag = ogre_consort }
	else_if = { limit = { consort_is_harpy = yes } set_consort_flag = harpy_consort }
	else_if = { limit = { consort_is_centaur = yes } set_consort_flag = centaur_consort }
	else_if = { limit = { consort_is_ruinborn = yes } set_consort_flag = ruinborn_consort }
}